// This file is auto-generated by @hey-api/openapi-ts

export const NavitimeResSchema = {
  type: 'object',
  properties: {
    script: {
      type: 'string',
    },
    cid: {
      type: 'string',
    },
  },
  required: ['script', 'cid'],
} as const

export const GetAddressResSchema = {
  type: 'object',
  properties: {
    postalCode: {
      type: 'string',
    },
    city: {
      type: 'string',
    },
    prefecture: {
      type: 'string',
    },
    houseNumber: {
      type: 'string',
    },
  },
  required: ['postalCode', 'city', 'prefecture', 'houseNumber'],
} as const

export const GetLatLongResSchema = {
  type: 'object',
  properties: {
    lat: {
      type: 'number',
    },
    lon: {
      type: 'number',
    },
  },
  required: ['lat', 'lon'],
} as const

export const ManagerSignUpDtoSchema = {
  type: 'object',
  properties: {
    email: {
      type: 'string',
      format: 'email',
    },
  },
  required: ['email'],
} as const

export const ManagerSignUpVerifyDtoSchema = {
  type: 'object',
  properties: {
    token: {
      type: 'string',
    },
  },
  required: ['token'],
} as const

export const ManagerSignUpVerifyTokenPayloadSchema = {
  type: 'object',
  properties: {
    email: {
      type: 'string',
    },
    tokenType: {
      type: 'string',
      enum: ['sign-up', 'password-reset', 'activate-staff-account'],
    },
    userType: {
      type: 'string',
      enum: ['manager', 'worker', 'staff', 'sub-worker', 'operator'],
    },
    hashToken: {
      type: 'string',
    },
  },
  required: ['email', 'tokenType', 'userType', 'hashToken'],
} as const

export const ManagerSignUpSetPasswordDtoSchema = {
  type: 'object',
  properties: {
    token: {
      type: 'string',
    },
    email: {
      type: 'string',
      format: 'email',
    },
    password: {
      type: 'string',
    },
  },
  required: ['token', 'email', 'password'],
} as const

export const OrderCompanyRoleSchema = {
  type: 'string',
  enum: ['MANAGER', 'STAFF'],
} as const

export const OrderCompanyUserStatusSchema = {
  type: 'string',
  enum: ['INVITING', 'ACTIVE', 'INACTIVE', 'SUSPENDED', 'DELETED'],
} as const

export const FileOwnerTypeSchema = {
  type: 'string',
  enum: ['WORKER', 'ORDER_COMPANY', 'OPERATOR'],
} as const

export const FilePrivacySchema = {
  type: 'string',
  enum: ['PUBLIC', 'PRIVATE'],
} as const

export const FileEntitySchema = {
  type: 'object',
  properties: {
    ownerType: {
      allOf: [
        {
          $ref: '#/components/schemas/FileOwnerType',
        },
      ],
    },
    privacy: {
      allOf: [
        {
          $ref: '#/components/schemas/FilePrivacy',
        },
      ],
    },
    deletedAt: {
      format: 'date-time',
      type: 'string',
      nullable: true,
    },
    s3Key: {
      type: 'string',
    },
    createdBy: {
      type: 'string',
    },
    id: {
      type: 'string',
    },
    originalName: {
      type: 'string',
    },
    mimeType: {
      type: 'string',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    updatedAt: {
      format: 'date-time',
      type: 'string',
      nullable: true,
    },
    ownerId: {
      type: 'string',
    },
    size: {
      type: 'number',
      nullable: true,
    },
    url: {
      type: 'string',
    },
  },
  required: [
    'ownerType',
    'privacy',
    'deletedAt',
    's3Key',
    'createdBy',
    'id',
    'originalName',
    'mimeType',
    'createdAt',
    'updatedAt',
    'ownerId',
    'size',
    'url',
  ],
} as const

export const CertificateTypeSchema = {
  type: 'string',
  enum: [
    'NoCertificate',
    'FirstClassArchitect',
    'SecondClassArchitect',
    'WoodenConstructionArchitect',
    'FirstClassConstructionManager',
    'SecondClassConstructionManager',
    'FirstClassPlumbingManager',
    'SecondClassPlumbingManager',
    'FirstClassElectricManager',
    'SecondClassElectricManager',
    'FirstClassCivilEngineeringManager',
    'SecondClassCivilEngineeringManager',
    'FirstClassConstructionAccounting',
    'SecondClassConstructionAccounting',
    'FirstClassElectrician',
    'SecondClassElectrician',
    'ElectricChiefTechnician',
    'FirefightingEquipmentTechnician',
    'WaterSupplyTechnician',
    'DrainageEquipmentTechnician',
    'AirConditioningTechnician',
    'HealthSafetyOfficer',
    'SafetySupervisorTrainingCompleted',
    'AsbestosBuildingMaterialsInvestigator',
    'AsbestosWorkManager',
    'ScaffoldWorkManager',
    'FormworkSupportWorkManager',
    'VehicleConstructionMachineOperator',
    'CraneOperatorTrainingCompleted',
    'SmallMobileCraneOperatorTrainingCompleted',
    'HighAltitudeWorkVehicleOperatorTrainingCompleted',
    'ForkliftOperatorTrainingCompleted',
    'Other',
  ],
} as const

export const LegalPersonalitySchema = {
  type: 'string',
  enum: ['PERSONAL', 'COMPANY'],
} as const

export const OrderCompanyCapitalSchema = {
  type: 'string',
  enum: [
    'NotProvided',
    'Under1Million',
    'From1To2_99Million',
    'From3To9_99Million',
    'From10To49_99Million',
    'From50To99_99Million',
    'Over100Million',
  ],
} as const

export const DocumentVerifyStatusSchema = {
  type: 'string',
  enum: ['INCOMPLETE', 'UNVERIFIED', 'VERIFIED', 'REJECTED'],
} as const

export const CategoryTypeSchema = {
  type: 'string',
  enum: ['WORKER', 'ORDER_COMPANY'],
} as const

export const JobCategoryEntitySchema = {
  type: 'object',
  properties: {
    type: {
      allOf: [
        {
          $ref: '#/components/schemas/CategoryType',
        },
      ],
    },
    id: {
      type: 'string',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    updatedAt: {
      format: 'date-time',
      type: 'string',
      nullable: true,
    },
    deletedAt: {
      format: 'date-time',
      type: 'string',
      nullable: true,
    },
    name: {
      type: 'string',
    },
    parentId: {
      type: 'string',
      nullable: true,
    },
    level: {
      type: 'number',
    },
    parent: {
      nullable: true,
      allOf: [
        {
          $ref: '#/components/schemas/JobCategoryEntity',
        },
      ],
    },
  },
  required: [
    'type',
    'id',
    'createdAt',
    'updatedAt',
    'deletedAt',
    'name',
    'parentId',
    'level',
    'parent',
  ],
} as const

export const OrderCompanyJobCategoryEntitySchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    updatedAt: {
      format: 'date-time',
      type: 'string',
      nullable: true,
    },
    deletedAt: {
      format: 'date-time',
      type: 'string',
      nullable: true,
    },
    orderCompanyId: {
      type: 'string',
    },
    jobCategoryId: {
      type: 'string',
    },
    jobCategory: {
      $ref: '#/components/schemas/JobCategoryEntity',
    },
  },
  required: [
    'id',
    'createdAt',
    'updatedAt',
    'deletedAt',
    'orderCompanyId',
    'jobCategoryId',
    'jobCategory',
  ],
} as const

export const OrderCompanyEntitySchema = {
  type: 'object',
  properties: {
    legalPersonality: {
      nullable: true,
      allOf: [
        {
          $ref: '#/components/schemas/LegalPersonality',
        },
      ],
    },
    capital: {
      nullable: true,
      allOf: [
        {
          $ref: '#/components/schemas/OrderCompanyCapital',
        },
      ],
    },
    documentVerifyStatus: {
      allOf: [
        {
          $ref: '#/components/schemas/DocumentVerifyStatus',
        },
      ],
    },
    id: {
      type: 'string',
    },
    name: {
      type: 'string',
    },
    furiganaName: {
      type: 'string',
      nullable: true,
    },
    representativeName: {
      type: 'string',
      nullable: true,
    },
    representativeFuriganaName: {
      type: 'string',
      nullable: true,
    },
    representativePhone: {
      type: 'string',
      nullable: true,
    },
    introduction: {
      type: 'string',
      nullable: true,
    },
    postalCode: {
      type: 'string',
      nullable: true,
    },
    province: {
      type: 'string',
      nullable: true,
    },
    municipality: {
      type: 'string',
      nullable: true,
    },
    address: {
      type: 'string',
      nullable: true,
    },
    fax: {
      type: 'string',
      nullable: true,
    },
    email: {
      type: 'string',
      nullable: true,
    },
    avatarId: {
      type: 'string',
      nullable: true,
    },
    isPhoneVerified: {
      type: 'boolean',
    },
    personInChargeName: {
      type: 'string',
      nullable: true,
    },
    personInChargeFuriganaName: {
      type: 'string',
      nullable: true,
    },
    personInChargePhone: {
      type: 'string',
      nullable: true,
    },
    registrationNumber: {
      type: 'string',
      nullable: true,
    },
    establishedAt: {
      type: 'string',
      nullable: true,
    },
    telephoneNumber: {
      type: 'string',
      nullable: true,
    },
    website: {
      type: 'string',
      nullable: true,
    },
    representativePosition: {
      type: 'string',
      nullable: true,
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    updatedAt: {
      format: 'date-time',
      type: 'string',
      nullable: true,
    },
    deletedAt: {
      format: 'date-time',
      type: 'string',
      nullable: true,
    },
    avatar: {
      nullable: true,
      allOf: [
        {
          $ref: '#/components/schemas/FileEntity',
        },
      ],
    },
    mapLink: {
      type: 'string',
      nullable: true,
    },
    jobCategories: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/OrderCompanyJobCategoryEntity',
      },
    },
  },
  required: [
    'legalPersonality',
    'capital',
    'documentVerifyStatus',
    'id',
    'name',
    'furiganaName',
    'representativeName',
    'representativeFuriganaName',
    'representativePhone',
    'introduction',
    'postalCode',
    'province',
    'municipality',
    'address',
    'fax',
    'email',
    'avatarId',
    'isPhoneVerified',
    'personInChargeName',
    'personInChargeFuriganaName',
    'personInChargePhone',
    'registrationNumber',
    'establishedAt',
    'telephoneNumber',
    'website',
    'representativePosition',
    'createdAt',
    'updatedAt',
    'deletedAt',
    'avatar',
    'mapLink',
    'jobCategories',
  ],
} as const

export const AITaskStatusSchema = {
  type: 'string',
  enum: ['PENDING', 'COMPLETED'],
} as const

export const AITaskUserTypeSchema = {
  type: 'string',
  enum: ['WORKER', 'ORDER_COMPANY'],
} as const

export const AITaskEntitySchema = {
  type: 'object',
  properties: {
    status: {
      allOf: [
        {
          $ref: '#/components/schemas/AITaskStatus',
        },
      ],
    },
    userType: {
      allOf: [
        {
          $ref: '#/components/schemas/AITaskUserType',
        },
      ],
    },
    id: {
      type: 'string',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    updatedAt: {
      format: 'date-time',
      type: 'string',
      nullable: true,
    },
    deletedAt: {
      format: 'date-time',
      type: 'string',
      nullable: true,
    },
    workerId: {
      type: 'string',
      nullable: true,
    },
    orderCompanyUserId: {
      type: 'string',
      nullable: true,
    },
    retryAttempt: {
      type: 'number',
    },
  },
  required: [
    'status',
    'userType',
    'id',
    'createdAt',
    'updatedAt',
    'deletedAt',
    'workerId',
    'orderCompanyUserId',
    'retryAttempt',
  ],
} as const

export const UserReviewStatOptimizedEntitySchema = {
  type: 'object',
  properties: {
    communicationReviewCount: {
      type: 'number',
    },
    reliabilityReviewCount: {
      type: 'number',
    },
    skillReviewCount: {
      type: 'number',
    },
    negativeReviewCount: {
      type: 'number',
    },
    orderCompanyUserId: {
      type: 'string',
      nullable: true,
    },
    workerId: {
      type: 'string',
      nullable: true,
    },
  },
  required: [
    'communicationReviewCount',
    'reliabilityReviewCount',
    'skillReviewCount',
    'negativeReviewCount',
  ],
} as const

export const OrderCompanyUserEntitySchema = {
  type: 'object',
  properties: {
    role: {
      allOf: [
        {
          $ref: '#/components/schemas/OrderCompanyRole',
        },
      ],
    },
    status: {
      allOf: [
        {
          $ref: '#/components/schemas/OrderCompanyUserStatus',
        },
      ],
    },
    lastOnlineAt: {
      format: 'date-time',
      type: 'string',
      nullable: true,
    },
    birthday: {
      format: 'date-time',
      type: 'string',
      nullable: true,
    },
    email: {
      type: 'string',
    },
    id: {
      type: 'string',
    },
    password: {
      type: 'string',
      nullable: true,
    },
    orderCompanyId: {
      type: 'string',
    },
    orderCompany: {
      $ref: '#/components/schemas/OrderCompanyEntity',
    },
    registeredAt: {
      format: 'date-time',
      type: 'string',
      nullable: true,
    },
    name: {
      type: 'string',
      nullable: true,
    },
    nickname: {
      type: 'string',
      nullable: true,
    },
    furiganaName: {
      type: 'string',
      nullable: true,
    },
    postalCode: {
      type: 'string',
      nullable: true,
    },
    prefecture: {
      type: 'string',
      nullable: true,
    },
    municipality: {
      type: 'string',
      nullable: true,
    },
    address: {
      type: 'string',
      nullable: true,
    },
    phone: {
      type: 'string',
      nullable: true,
    },
    introduction: {
      type: 'string',
      nullable: true,
    },
    inventoryId: {
      type: 'string',
      nullable: true,
    },
    avatarId: {
      type: 'string',
      nullable: true,
    },
    avatar: {
      nullable: true,
      allOf: [
        {
          $ref: '#/components/schemas/FileEntity',
        },
      ],
    },
    documents: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/OrderCompanyUserDocumentEntity',
      },
    },
    aiTask: {
      nullable: true,
      allOf: [
        {
          $ref: '#/components/schemas/AITaskEntity',
        },
      ],
    },
    reviewStat: {
      nullable: true,
      allOf: [
        {
          $ref: '#/components/schemas/UserReviewStatOptimizedEntity',
        },
      ],
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    updatedAt: {
      format: 'date-time',
      type: 'string',
      nullable: true,
    },
    deletedAt: {
      format: 'date-time',
      type: 'string',
      nullable: true,
    },
  },
  required: [
    'role',
    'status',
    'lastOnlineAt',
    'birthday',
    'email',
    'id',
    'password',
    'orderCompanyId',
    'orderCompany',
    'registeredAt',
    'name',
    'nickname',
    'furiganaName',
    'postalCode',
    'prefecture',
    'municipality',
    'address',
    'phone',
    'introduction',
    'inventoryId',
    'avatarId',
    'createdAt',
    'updatedAt',
    'deletedAt',
  ],
} as const

export const OrderCompanyUserDocumentFileEntitySchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    updatedAt: {
      format: 'date-time',
      type: 'string',
      nullable: true,
    },
    deletedAt: {
      format: 'date-time',
      type: 'string',
      nullable: true,
    },
    orderCompanyUserDocumentId: {
      type: 'string',
    },
    orderCompanyUserDocument: {
      $ref: '#/components/schemas/OrderCompanyUserDocumentEntity',
    },
    fileId: {
      type: 'string',
    },
    file: {
      $ref: '#/components/schemas/FileEntity',
    },
  },
  required: [
    'id',
    'createdAt',
    'updatedAt',
    'deletedAt',
    'orderCompanyUserDocumentId',
    'orderCompanyUserDocument',
    'fileId',
    'file',
  ],
} as const

export const OrderCompanyUserDocumentEntitySchema = {
  type: 'object',
  properties: {
    certificateType: {
      nullable: true,
      allOf: [
        {
          $ref: '#/components/schemas/CertificateType',
        },
      ],
    },
    id: {
      type: 'string',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    updatedAt: {
      format: 'date-time',
      type: 'string',
      nullable: true,
    },
    deletedAt: {
      format: 'date-time',
      type: 'string',
      nullable: true,
    },
    orderCompanyUserId: {
      type: 'string',
    },
    orderCompanyUser: {
      $ref: '#/components/schemas/OrderCompanyUserEntity',
    },
    certificateOtherName: {
      type: 'string',
      nullable: true,
    },
    files: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/OrderCompanyUserDocumentFileEntity',
      },
    },
  },
  required: [
    'certificateType',
    'id',
    'createdAt',
    'updatedAt',
    'deletedAt',
    'orderCompanyUserId',
    'orderCompanyUser',
    'certificateOtherName',
    'files',
  ],
} as const

export const OrderCompanyUserDtoSchema = {
  type: 'object',
  properties: {
    role: {
      allOf: [
        {
          $ref: '#/components/schemas/OrderCompanyRole',
        },
      ],
    },
    status: {
      allOf: [
        {
          $ref: '#/components/schemas/OrderCompanyUserStatus',
        },
      ],
    },
    id: {
      type: 'string',
    },
    email: {
      type: 'string',
    },
    orderCompanyId: {
      type: 'string',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    updatedAt: {
      format: 'date-time',
      type: 'string',
      nullable: true,
    },
    name: {
      type: 'string',
      nullable: true,
    },
    nickname: {
      type: 'string',
      nullable: true,
    },
    furiganaName: {
      type: 'string',
      nullable: true,
    },
    registeredAt: {
      format: 'date-time',
      type: 'string',
      nullable: true,
    },
    phone: {
      type: 'string',
      nullable: true,
    },
    introduction: {
      type: 'string',
      nullable: true,
    },
    avatarId: {
      type: 'string',
      nullable: true,
    },
    postalCode: {
      type: 'string',
      nullable: true,
    },
    prefecture: {
      type: 'string',
      nullable: true,
    },
    municipality: {
      type: 'string',
      nullable: true,
    },
    address: {
      type: 'string',
      nullable: true,
    },
    avatar: {
      nullable: true,
      allOf: [
        {
          $ref: '#/components/schemas/FileEntity',
        },
      ],
    },
    documents: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/OrderCompanyUserDocumentEntity',
      },
    },
    aiTask: {
      nullable: true,
      allOf: [
        {
          $ref: '#/components/schemas/AITaskEntity',
        },
      ],
    },
    reviewStat: {
      nullable: true,
      allOf: [
        {
          $ref: '#/components/schemas/UserReviewStatOptimizedEntity',
        },
      ],
    },
  },
  required: [
    'role',
    'status',
    'id',
    'email',
    'orderCompanyId',
    'createdAt',
    'updatedAt',
    'name',
    'nickname',
    'furiganaName',
    'registeredAt',
    'phone',
    'introduction',
    'avatarId',
    'postalCode',
    'prefecture',
    'municipality',
    'address',
  ],
} as const

export const OrderCompanyUserSignInResSchema = {
  type: 'object',
  properties: {
    accessToken: {
      type: 'string',
    },
    refreshToken: {
      type: 'string',
    },
    user: {
      $ref: '#/components/schemas/OrderCompanyUserDto',
    },
  },
  required: ['accessToken', 'refreshToken', 'user'],
} as const

export const ActivateStaffAccountVerifyDtoSchema = {
  type: 'object',
  properties: {
    token: {
      type: 'string',
    },
  },
  required: ['token'],
} as const

export const ActivateStaffAccountVerifyResSchema = {
  type: 'object',
  properties: {
    user: {
      $ref: '#/components/schemas/OrderCompanyUserDto',
    },
    hashToken: {
      type: 'string',
    },
    isAccountExisted: {
      type: 'boolean',
    },
  },
  required: ['user', 'hashToken', 'isAccountExisted'],
} as const

export const ActivateStaffAccountSetPasswordDtoSchema = {
  type: 'object',
  properties: {
    token: {
      type: 'string',
    },
    password: {
      type: 'string',
    },
    isReuseAccount: {
      type: 'boolean',
    },
  },
  required: ['token', 'password'],
} as const

export const ForgotPasswordSendMailDtoSchema = {
  type: 'object',
  properties: {
    email: {
      type: 'string',
      format: 'email',
    },
  },
  required: ['email'],
} as const

export const ForgotPasswordVerifyDtoSchema = {
  type: 'object',
  properties: {
    token: {
      type: 'string',
    },
  },
  required: ['token'],
} as const

export const ForgotPasswordSetPasswordDtoSchema = {
  type: 'object',
  properties: {
    token: {
      type: 'string',
    },
    password: {
      type: 'string',
    },
  },
  required: ['token', 'password'],
} as const

export const ManagerSignInDtoSchema = {
  type: 'object',
  properties: {
    email: {
      type: 'string',
      format: 'email',
    },
    password: {
      type: 'string',
    },
  },
  required: ['email', 'password'],
} as const

export const UpdateFileFieldDtoSchema = {
  type: 'object',
  properties: {
    key: {
      type: 'string',
    },
    isPublic: {
      type: 'boolean',
    },
    originalName: {
      type: 'string',
    },
    size: {
      type: 'number',
      maximum: 10485760,
    },
  },
  required: ['key', 'isPublic', 'originalName'],
} as const

export const UpdateStaffProfileDocumentDtoSchema = {
  type: 'object',
  properties: {
    certificateType: {
      allOf: [
        {
          $ref: '#/components/schemas/CertificateType',
        },
      ],
    },
    certificateOtherName: {
      type: 'string',
      description: 'Required when certificateType is Other',
      example: 'Special Construction License',
    },
    id: {
      type: 'string',
      format: 'uuid',
    },
    files: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/UpdateFileFieldDto',
      },
    },
  },
  required: ['certificateType'],
} as const

export const UpdateStaffProfileDtoSchema = {
  type: 'object',
  properties: {
    nickname: {
      type: 'string',
    },
    name: {
      type: 'string',
    },
    furiganaName: {
      type: 'string',
    },
    phone: {
      type: 'string',
      pattern: 'PHONE_NUMBER_REGEX',
    },
    postalCode: {
      type: 'string',
    },
    prefecture: {
      type: 'string',
    },
    municipality: {
      type: 'string',
    },
    address: {
      type: 'string',
    },
    introduction: {
      type: 'string',
    },
    avatar: {
      $ref: '#/components/schemas/UpdateFileFieldDto',
    },
    documents: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/UpdateStaffProfileDocumentDto',
      },
    },
  },
  required: ['nickname', 'name'],
} as const

export const UpdateStaffProfileAvatarDtoSchema = {
  type: 'object',
  properties: {
    key: {
      type: 'string',
    },
    originalName: {
      type: 'string',
    },
    size: {
      type: 'number',
      maximum: 10485760,
    },
  },
  required: ['key', 'originalName'],
} as const

export const UpdateAvatarResSchema = {
  type: 'object',
  properties: {
    url: {
      type: 'string',
    },
    isAvatarProcessing: {
      type: 'boolean',
    },
    id: {
      type: 'string',
    },
  },
  required: ['url', 'isAvatarProcessing', 'id'],
} as const

export const ChangePasswordDtoSchema = {
  type: 'object',
  properties: {
    oldPassword: {
      type: 'string',
    },
    newPassword: {
      type: 'string',
    },
  },
  required: ['oldPassword', 'newPassword'],
} as const

export const RefreshTokenDtoSchema = {
  type: 'object',
  properties: {
    refreshToken: {
      type: 'string',
    },
    accessToken: {
      type: 'string',
    },
  },
  required: ['refreshToken', 'accessToken'],
} as const

export const LogoutDtoSchema = {
  type: 'object',
  properties: {
    refreshToken: {
      type: 'string',
    },
  },
  required: ['refreshToken'],
} as const

export const FileExtensionSchema = {
  type: 'string',
  enum: [
    'jpg',
    'png',
    'jpeg',
    'gif',
    'svg',
    'webp',
    'mp4',
    'mp3',
    'pdf',
    'doc',
    'docx',
    'xls',
    'xlsx',
    'ppt',
    'pptx',
    'txt',
    'csv',
    'json',
    'xml',
    'heic',
    'heif',
  ],
} as const

export const GetUploadPresignedUrlResDtoSchema = {
  type: 'object',
  properties: {
    url: {
      type: 'string',
    },
    key: {
      type: 'string',
    },
    isPublic: {
      type: 'boolean',
    },
    viewUrl: {
      type: 'string',
    },
  },
  required: ['url', 'key', 'isPublic', 'viewUrl'],
} as const

export const ManagerStaffCreateDtoSchema = {
  type: 'object',
  properties: {
    email: {
      type: 'string',
      format: 'email',
    },
  },
  required: ['email'],
} as const

export const ManagerStaffGetListResponseDtoSchema = {
  type: 'object',
  properties: {
    items: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/OrderCompanyUserDto',
      },
    },
    totalItems: {
      type: 'number',
    },
  },
  required: ['items', 'totalItems'],
} as const

export const UpdateOrderCompanyDtoSchema = {
  type: 'object',
  properties: {
    avatar: {
      description: 'Company avatar/logo',
      allOf: [
        {
          $ref: '#/components/schemas/UpdateFileFieldDto',
        },
      ],
    },
    name: {
      type: 'string',
      description: 'Company name',
    },
    furiganaName: {
      type: 'string',
      description: 'Company furigana name',
    },
    legalPersonality: {
      type: 'string',
      enum: ['PERSONAL', 'COMPANY'],
      description: 'Legal personality of the company',
      default: 'PERSONAL',
    },
    representativeName: {
      type: 'string',
      description: 'Representative name',
    },
    representativeFuriganaName: {
      type: 'string',
      description: 'Representative furigana name',
    },
    representativePosition: {
      type: 'string',
      description: 'Representative position in company',
    },
    representativePhone: {
      type: 'string',
      description: 'Representative phone number',
      example: '+81123456789',
    },
    personInChargeName: {
      type: 'string',
      description: 'Person in charge name',
    },
    personInChargeFuriganaName: {
      type: 'string',
      description: 'Person in charge furigana name',
    },
    capital: {
      type: 'object',
      description: 'Company capital options',
      example: 'NotProvided',
    },
    registrationNumber: {
      type: 'string',
      pattern: 'ORDER_COMPANY_REGISTRATION_NUMBER_REGEX',
      description: 'Company registration number',
    },
    establishedAt: {
      type: 'string',
      description: 'Company establishment date',
      example: 'YYYY-MM-DD',
    },
    introduction: {
      type: 'string',
      maxLength: 2000,
      description: 'Company introduction',
    },
    postalCode: {
      type: 'string',
      description: 'Postal code',
      example: '123-4567',
    },
    province: {
      type: 'string',
      description: 'Province/Prefecture',
    },
    municipality: {
      type: 'string',
      description: 'Municipality/City',
    },
    address: {
      type: 'string',
      description: 'Street address',
    },
    email: {
      type: 'string',
      format: 'email',
      description: 'Company email address',
      example: 'contact@company.com',
    },
    fax: {
      type: 'string',
      description: 'Company fax number',
      example: '+81123456789',
    },
    mapLink: {
      type: 'string',
      description: 'Company map link',
    },
    telephoneNumber: {
      type: 'string',
      description: 'Company telephone number',
    },
    website: {
      type: 'string',
      description: 'Company website',
    },
  },
  required: ['legalPersonality'],
} as const

export const GetOrderCompanyResponseDtoSchema = {
  type: 'object',
  properties: {
    legalPersonality: {
      nullable: true,
      allOf: [
        {
          $ref: '#/components/schemas/LegalPersonality',
        },
      ],
    },
    capital: {
      nullable: true,
      allOf: [
        {
          $ref: '#/components/schemas/OrderCompanyCapital',
        },
      ],
    },
    documentVerifyStatus: {
      allOf: [
        {
          $ref: '#/components/schemas/DocumentVerifyStatus',
        },
      ],
    },
    id: {
      type: 'string',
    },
    name: {
      type: 'string',
    },
    furiganaName: {
      type: 'string',
      nullable: true,
    },
    representativeName: {
      type: 'string',
      nullable: true,
    },
    representativeFuriganaName: {
      type: 'string',
      nullable: true,
    },
    representativePhone: {
      type: 'string',
      nullable: true,
    },
    introduction: {
      type: 'string',
      nullable: true,
    },
    postalCode: {
      type: 'string',
      nullable: true,
    },
    province: {
      type: 'string',
      nullable: true,
    },
    municipality: {
      type: 'string',
      nullable: true,
    },
    address: {
      type: 'string',
      nullable: true,
    },
    fax: {
      type: 'string',
      nullable: true,
    },
    email: {
      type: 'string',
      nullable: true,
    },
    avatarId: {
      type: 'string',
      nullable: true,
    },
    isPhoneVerified: {
      type: 'boolean',
    },
    personInChargeName: {
      type: 'string',
      nullable: true,
    },
    personInChargeFuriganaName: {
      type: 'string',
      nullable: true,
    },
    personInChargePhone: {
      type: 'string',
      nullable: true,
    },
    registrationNumber: {
      type: 'string',
      nullable: true,
    },
    establishedAt: {
      type: 'string',
      nullable: true,
    },
    telephoneNumber: {
      type: 'string',
      nullable: true,
    },
    website: {
      type: 'string',
      nullable: true,
    },
    representativePosition: {
      type: 'string',
      nullable: true,
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    updatedAt: {
      format: 'date-time',
      type: 'string',
      nullable: true,
    },
    avatar: {
      nullable: true,
      allOf: [
        {
          $ref: '#/components/schemas/FileEntity',
        },
      ],
    },
    mapLink: {
      type: 'string',
      nullable: true,
    },
    jobCategories: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/OrderCompanyJobCategoryEntity',
      },
    },
  },
  required: [
    'legalPersonality',
    'capital',
    'documentVerifyStatus',
    'id',
    'name',
    'furiganaName',
    'representativeName',
    'representativeFuriganaName',
    'representativePhone',
    'introduction',
    'postalCode',
    'province',
    'municipality',
    'address',
    'fax',
    'email',
    'avatarId',
    'isPhoneVerified',
    'personInChargeName',
    'personInChargeFuriganaName',
    'personInChargePhone',
    'registrationNumber',
    'establishedAt',
    'telephoneNumber',
    'website',
    'representativePosition',
    'createdAt',
    'updatedAt',
    'avatar',
    'mapLink',
    'jobCategories',
  ],
} as const

export const JobCategoryDtoSchema = {
  type: 'object',
  properties: {
    children: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/JobCategoryDto',
      },
    },
    id: {
      type: 'string',
    },
    name: {
      type: 'string',
    },
    level: {
      type: 'number',
    },
    parentId: {
      type: 'string',
      nullable: true,
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
  },
  required: ['children', 'id', 'name', 'level', 'parentId', 'createdAt'],
} as const

export const UpdateOrderCompanyJobCategoryDtoSchema = {
  type: 'object',
  properties: {
    jobCategoryIds: {
      description: 'Job category ids',
      type: 'array',
      items: {
        type: 'string',
      },
    },
  },
} as const

export const OrderCompanyAchievementImageEntitySchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    updatedAt: {
      format: 'date-time',
      type: 'string',
      nullable: true,
    },
    deletedAt: {
      format: 'date-time',
      type: 'string',
      nullable: true,
    },
    orderCompanyAchievementId: {
      type: 'string',
    },
    fileId: {
      type: 'string',
    },
    file: {
      $ref: '#/components/schemas/FileEntity',
    },
  },
  required: [
    'id',
    'createdAt',
    'updatedAt',
    'deletedAt',
    'orderCompanyAchievementId',
    'fileId',
    'file',
  ],
} as const

export const OrderCompanyAchievementResDtoSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    updatedAt: {
      format: 'date-time',
      type: 'string',
      nullable: true,
    },
    title: {
      type: 'string',
    },
    description: {
      type: 'string',
      nullable: true,
    },
    images: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/OrderCompanyAchievementImageEntity',
      },
    },
    orderCompanyId: {
      type: 'string',
    },
  },
  required: ['id', 'createdAt', 'updatedAt', 'title', 'description', 'images', 'orderCompanyId'],
} as const

export const UpdateOrderCompanyAchievementDtoSchema = {
  type: 'object',
  properties: {
    title: {
      type: 'string',
      description: 'Achievement title',
    },
    description: {
      type: 'string',
      description: 'Achievement description',
    },
    images: {
      description: 'Achievement images',
      type: 'array',
      items: {
        $ref: '#/components/schemas/UpdateFileFieldDto',
      },
    },
  },
} as const

export const CreateOrderCompanyAchievementDtoSchema = {
  type: 'object',
  properties: {
    title: {
      type: 'string',
      description: 'Achievement title',
    },
    description: {
      type: 'string',
      description: 'Achievement description',
    },
    images: {
      description: 'Achievement images',
      type: 'array',
      items: {
        $ref: '#/components/schemas/UpdateFileFieldDto',
      },
    },
  },
  required: ['title', 'description', 'images'],
} as const

export const VerifyPhoneNumberSendOtpDtoSchema = {
  type: 'object',
  properties: {
    phoneNumber: {
      type: 'string',
      description: 'Phone number',
    },
  },
  required: ['phoneNumber'],
} as const

export const VerifyPhoneNumberVerifyOtpDtoSchema = {
  type: 'object',
  properties: {
    phoneNumber: {
      type: 'string',
      description: 'Phone number',
    },
    otp: {
      type: 'string',
      description: 'OTP',
    },
  },
  required: ['phoneNumber', 'otp'],
} as const

export const UpdateOrderCompanyDocumentsDtoSchema = {
  type: 'object',
  properties: {
    type: {
      type: 'string',
      description: 'Document type',
      enum: [
        'DRIVING_LICENSE',
        'MY_NUMBER_CARD',
        'PASSPORT',
        'HEALTH_INSURANCE_RESIDENT_CARD',
        'RESIDENCE_CARD',
        'BASIC_RESIDENCE_CARD',
        'PACKAGE_A',
        'PACKAGE_B',
        'PACKAGE_C',
      ],
    },
    additionalType: {
      type: 'string',
      description: 'Additional document type',
      enum: [
        'DRIVING_LICENSE',
        'MY_NUMBER_CARD',
        'PASSPORT',
        'HEALTH_INSURANCE_RESIDENT_CARD',
        'RESIDENCE_CARD',
        'BASIC_RESIDENCE_CARD',
        'PACKAGE_A',
        'PACKAGE_B',
        'PACKAGE_C',
      ],
    },
    mainFiles: {
      description: 'Main documents',
      type: 'array',
      items: {
        $ref: '#/components/schemas/UpdateFileFieldDto',
      },
    },
    additionalFiles: {
      description: 'Additional documents',
      type: 'array',
      items: {
        $ref: '#/components/schemas/UpdateFileFieldDto',
      },
    },
  },
  required: ['type'],
} as const

export const OrderCompanyDocumentFileTypeSchema = {
  type: 'string',
  enum: ['MAIN', 'ADDITIONAL'],
} as const

export const OrderCompanyDocumentFileDtoSchema = {
  type: 'object',
  properties: {
    type: {
      allOf: [
        {
          $ref: '#/components/schemas/OrderCompanyDocumentFileType',
        },
      ],
    },
    id: {
      type: 'string',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    updatedAt: {
      format: 'date-time',
      type: 'string',
      nullable: true,
    },
    orderCompanyDocumentId: {
      type: 'string',
    },
    fileId: {
      type: 'string',
    },
    file: {
      $ref: '#/components/schemas/FileEntity',
    },
  },
  required: ['type', 'id', 'createdAt', 'updatedAt', 'orderCompanyDocumentId', 'fileId', 'file'],
} as const

export const GetOrderCompanyDocumentsResDtoSchema = {
  type: 'object',
  properties: {
    legalPersonality: {
      type: 'string',
      nullable: true,
      description: 'Legal personality',
      enum: ['PERSONAL', 'COMPANY'],
    },
    type: {
      type: 'string',
      description: 'Document type',
      enum: [
        'DRIVING_LICENSE',
        'MY_NUMBER_CARD',
        'PASSPORT',
        'HEALTH_INSURANCE_RESIDENT_CARD',
        'RESIDENCE_CARD',
        'BASIC_RESIDENCE_CARD',
        'PACKAGE_A',
        'PACKAGE_B',
        'PACKAGE_C',
      ],
      nullable: true,
    },
    additionalType: {
      type: 'string',
      nullable: true,
      description: 'Additional document type',
      enum: [
        'DRIVING_LICENSE',
        'MY_NUMBER_CARD',
        'PASSPORT',
        'HEALTH_INSURANCE_RESIDENT_CARD',
        'RESIDENCE_CARD',
        'BASIC_RESIDENCE_CARD',
        'PACKAGE_A',
        'PACKAGE_B',
        'PACKAGE_C',
      ],
    },
    additionalFiles: {
      description: 'Additional files',
      type: 'array',
      items: {
        $ref: '#/components/schemas/OrderCompanyDocumentFileDto',
      },
    },
    mainFiles: {
      description: 'Main files',
      type: 'array',
      items: {
        $ref: '#/components/schemas/OrderCompanyDocumentFileDto',
      },
    },
    rejectReasons: {
      description: 'Reject reasons',
      type: 'array',
      items: {
        type: 'string',
      },
    },
    comment: {
      type: 'string',
      nullable: true,
      description: 'Comment',
    },
  },
} as const

export const OrderCompanyProfileTabStatusSchema = {
  type: 'string',
  enum: ['INCOMPLETE', 'UNVERIFIED', 'COMPLETED'],
} as const

export const GetOrderCompanyStatusesResDtoSchema = {
  type: 'object',
  properties: {
    basicInfo: {
      allOf: [
        {
          $ref: '#/components/schemas/OrderCompanyProfileTabStatus',
        },
      ],
    },
    document: {
      allOf: [
        {
          $ref: '#/components/schemas/DocumentVerifyStatus',
        },
      ],
    },
    achievement: {
      allOf: [
        {
          $ref: '#/components/schemas/OrderCompanyProfileTabStatus',
        },
      ],
    },
    jobCategory: {
      allOf: [
        {
          $ref: '#/components/schemas/OrderCompanyProfileTabStatus',
        },
      ],
    },
  },
  required: ['basicInfo', 'document', 'achievement', 'jobCategory'],
} as const

export const JobCategoryResDtoSchema = {
  type: 'object',
  properties: {
    categories: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/JobCategoryDto',
      },
    },
  },
  required: ['categories'],
} as const

export const StaffDropdownDtoSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
    },
    name: {
      type: 'string',
      nullable: true,
    },
    email: {
      type: 'string',
    },
    avatar: {
      nullable: true,
      allOf: [
        {
          $ref: '#/components/schemas/FileEntity',
        },
      ],
    },
    nickname: {
      type: 'string',
      nullable: true,
    },
  },
  required: ['id', 'name', 'email', 'nickname'],
} as const

export const ConstructionSiteStatusSchema = {
  type: 'string',
  enum: ['WAITING_FOR_WORKER', 'OFFERING', 'COMPLETED'],
} as const

export const ConstructionSiteDtoSchema = {
  type: 'object',
  properties: {
    status: {
      allOf: [
        {
          $ref: '#/components/schemas/ConstructionSiteStatus',
        },
      ],
    },
    jobCategories: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/JobCategoryEntity',
      },
    },
    id: {
      type: 'string',
    },
    name: {
      type: 'string',
    },
    orderCompanyId: {
      type: 'string',
    },
    orderCompany: {
      $ref: '#/components/schemas/OrderCompanyEntity',
    },
    municipality: {
      type: 'string',
      nullable: true,
    },
    createdBy: {
      type: 'string',
    },
    province: {
      type: 'string',
    },
    address: {
      type: 'string',
      nullable: true,
    },
    latitude: {
      type: 'number',
      nullable: true,
    },
    longitude: {
      type: 'number',
      nullable: true,
    },
    order: {
      type: 'number',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    updatedAt: {
      format: 'date-time',
      type: 'string',
      nullable: true,
    },
    deletedAt: {
      format: 'date-time',
      type: 'string',
      nullable: true,
    },
    createdByUser: {
      $ref: '#/components/schemas/OrderCompanyUserEntity',
    },
  },
  required: [
    'status',
    'jobCategories',
    'id',
    'name',
    'orderCompanyId',
    'orderCompany',
    'municipality',
    'createdBy',
    'province',
    'address',
    'latitude',
    'longitude',
    'order',
    'createdAt',
    'updatedAt',
    'deletedAt',
    'createdByUser',
  ],
} as const

export const GetConstructionSitesResDtoSchema = {
  type: 'object',
  properties: {
    items: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/ConstructionSiteDto',
      },
    },
    totalItems: {
      type: 'number',
    },
  },
  required: ['items', 'totalItems'],
} as const

export const ConstructionSiteForDropdownDtoSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
    },
    name: {
      type: 'string',
    },
    province: {
      type: 'string',
    },
    municipality: {
      type: 'string',
      nullable: true,
    },
    address: {
      type: 'string',
      nullable: true,
    },
    latitude: {
      type: 'number',
      nullable: true,
    },
    longitude: {
      type: 'number',
      nullable: true,
    },
  },
  required: ['id', 'name', 'province', 'municipality', 'address', 'latitude', 'longitude'],
} as const

export const WorkerTransportationSchema = {
  type: 'string',
  enum: ['PRIVATE_CAR', 'TRAIN_BUS', 'BICYCLE'],
} as const

export const JobWorkerAmountSchema = {
  type: 'string',
  enum: ['ONE', 'TWO', 'THREE_TO_FIVE', 'ABOVE_FIVE'],
} as const

export const WorkShiftSchema = {
  type: 'string',
  enum: ['DAY', 'NIGHT'],
} as const

export const YearExperienceSchema = {
  type: 'string',
  enum: ['LESS_THAN_1_YEAR', 'MORE_THAN_1_YEAR', 'MORE_THAN_3_YEARS', 'MORE_THAN_10_YEARS'],
} as const

export const JobAgeRequirementSchema = {
  type: 'string',
  enum: ['UNSPECIFIED', 'UP_TO_29', 'FROM_30_TO_59', 'ABOVE_60'],
} as const

export const JobReviewRequirementSchema = {
  type: 'string',
  enum: ['ABOVE_3', 'ABOVE_5'],
} as const

export const JobWorkerCertificationSchema = {
  type: 'string',
  enum: [
    'IDENTITY_VERIFIED',
    'SOCIAL_INSURANCE',
    'ACCIDENT_INSURANCE',
    'INVOICE_REGISTERED',
    'QUICK_RESPONSE',
  ],
} as const

export const ConstructionSiteEntitySchema = {
  type: 'object',
  properties: {
    status: {
      allOf: [
        {
          $ref: '#/components/schemas/ConstructionSiteStatus',
        },
      ],
    },
    id: {
      type: 'string',
    },
    name: {
      type: 'string',
    },
    orderCompanyId: {
      type: 'string',
    },
    orderCompany: {
      $ref: '#/components/schemas/OrderCompanyEntity',
    },
    municipality: {
      type: 'string',
      nullable: true,
    },
    createdBy: {
      type: 'string',
    },
    province: {
      type: 'string',
    },
    address: {
      type: 'string',
      nullable: true,
    },
    latitude: {
      type: 'number',
      nullable: true,
    },
    longitude: {
      type: 'number',
      nullable: true,
    },
    order: {
      type: 'number',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    updatedAt: {
      format: 'date-time',
      type: 'string',
      nullable: true,
    },
    deletedAt: {
      format: 'date-time',
      type: 'string',
      nullable: true,
    },
    createdByUser: {
      $ref: '#/components/schemas/OrderCompanyUserEntity',
    },
  },
  required: [
    'status',
    'id',
    'name',
    'orderCompanyId',
    'orderCompany',
    'municipality',
    'createdBy',
    'province',
    'address',
    'latitude',
    'longitude',
    'order',
    'createdAt',
    'updatedAt',
    'deletedAt',
    'createdByUser',
  ],
} as const

export const JobDetailListItemSchema = {
  type: 'object',
  properties: {
    workerTransportation: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/WorkerTransportation',
      },
    },
    workerAmount: {
      nullable: true,
      allOf: [
        {
          $ref: '#/components/schemas/JobWorkerAmount',
        },
      ],
    },
    shiftType: {
      allOf: [
        {
          $ref: '#/components/schemas/WorkShift',
        },
      ],
    },
    yearOfExperience: {
      nullable: true,
      allOf: [
        {
          $ref: '#/components/schemas/YearExperience',
        },
      ],
    },
    ageRequirement: {
      nullable: true,
      allOf: [
        {
          $ref: '#/components/schemas/JobAgeRequirement',
        },
      ],
    },
    skillRequirement: {
      nullable: true,
      allOf: [
        {
          $ref: '#/components/schemas/JobReviewRequirement',
        },
      ],
    },
    communicationRequirement: {
      nullable: true,
      allOf: [
        {
          $ref: '#/components/schemas/JobReviewRequirement',
        },
      ],
    },
    reliabilityRequirement: {
      nullable: true,
      allOf: [
        {
          $ref: '#/components/schemas/JobReviewRequirement',
        },
      ],
    },
    workerCertifications: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/JobWorkerCertification',
      },
    },
    workDates: {
      type: 'array',
      items: {
        type: 'string',
      },
    },
    id: {
      type: 'string',
    },
    orderCompanyId: {
      type: 'string',
    },
    orderCompany: {
      $ref: '#/components/schemas/OrderCompanyEntity',
    },
    constructionSiteId: {
      type: 'string',
    },
    constructionSite: {
      $ref: '#/components/schemas/ConstructionSiteEntity',
    },
    jobCategoryId: {
      type: 'string',
    },
    jobCategory: {
      $ref: '#/components/schemas/JobCategoryEntity',
    },
    salaryRangeFrom: {
      type: 'number',
      nullable: true,
    },
    salaryRangeTo: {
      type: 'number',
      nullable: true,
    },
    nationality: {
      type: 'string',
      nullable: true,
    },
    description: {
      type: 'string',
      nullable: true,
    },
    expiredAt: {
      format: 'date-time',
      type: 'string',
    },
    isOpenForApply: {
      type: 'boolean',
    },
    createdBy: {
      type: 'string',
    },
    createdByUser: {
      $ref: '#/components/schemas/OrderCompanyUserEntity',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    updatedAt: {
      format: 'date-time',
      type: 'string',
      nullable: true,
    },
    deletedAt: {
      format: 'date-time',
      type: 'string',
      nullable: true,
    },
  },
  required: [
    'workerTransportation',
    'workerAmount',
    'shiftType',
    'yearOfExperience',
    'ageRequirement',
    'skillRequirement',
    'communicationRequirement',
    'reliabilityRequirement',
    'workerCertifications',
    'workDates',
    'id',
    'orderCompanyId',
    'orderCompany',
    'constructionSiteId',
    'constructionSite',
    'jobCategoryId',
    'jobCategory',
    'salaryRangeFrom',
    'salaryRangeTo',
    'nationality',
    'description',
    'expiredAt',
    'isOpenForApply',
    'createdBy',
    'createdByUser',
    'createdAt',
    'updatedAt',
    'deletedAt',
  ],
} as const

export const WorkerTypeSchema = {
  type: 'string',
  enum: ['WORKER', 'SUB_WORKER'],
} as const

export const FileDtoSchema = {
  type: 'object',
  properties: {
    ownerType: {
      allOf: [
        {
          $ref: '#/components/schemas/FileOwnerType',
        },
      ],
    },
    privacy: {
      allOf: [
        {
          $ref: '#/components/schemas/FilePrivacy',
        },
      ],
    },
    id: {
      type: 'string',
    },
    s3Key: {
      type: 'string',
    },
    originalName: {
      type: 'string',
    },
    mimeType: {
      type: 'string',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    updatedAt: {
      format: 'date-time',
      type: 'string',
      nullable: true,
    },
    ownerId: {
      type: 'string',
    },
    url: {
      type: 'string',
    },
    size: {
      type: 'number',
      nullable: true,
    },
  },
  required: [
    'ownerType',
    'privacy',
    'id',
    's3Key',
    'originalName',
    'mimeType',
    'createdAt',
    'updatedAt',
    'ownerId',
    'url',
    'size',
  ],
} as const

export const WorkerInOfferDtoSchema = {
  type: 'object',
  properties: {
    workerType: {
      allOf: [
        {
          $ref: '#/components/schemas/WorkerType',
        },
      ],
    },
    id: {
      type: 'string',
    },
    fullName: {
      type: 'string',
    },
    nickname: {
      type: 'string',
    },
    avatar: {
      $ref: '#/components/schemas/FileDto',
    },
  },
  required: ['workerType', 'id', 'fullName', 'nickname', 'avatar'],
} as const

export const OfferDetailListItemSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    updatedAt: {
      format: 'date-time',
      type: 'string',
    },
    job: {
      $ref: '#/components/schemas/JobDetailListItem',
    },
    offerWorkDates: {
      type: 'array',
      items: {
        type: 'string',
      },
    },
    workers: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/WorkerInOfferDto',
      },
    },
  },
  required: ['id', 'createdAt', 'updatedAt', 'job', 'offerWorkDates', 'workers'],
} as const

export const JobWorkerExperienceSchema = {
  type: 'string',
  enum: [
    'UNSPECIFIED',
    'LESS_THAN_1_YEAR',
    'MORE_THAN_1_YEAR',
    'MORE_THAN_3_YEARS',
    'MORE_THAN_10_YEARS',
  ],
} as const

export const NationalityTypeSchema = {
  type: 'string',
  enum: ['JP', 'VN', 'PH', 'CN', 'OTHER'],
} as const

export const CreateJobConstructionSiteDtoSchema = {
  type: 'object',
  properties: {
    name: {
      type: 'string',
    },
    province: {
      type: 'string',
    },
    municipality: {
      type: 'string',
    },
    address: {
      type: 'string',
    },
    latitude: {
      type: 'number',
    },
    longitude: {
      type: 'number',
    },
  },
  required: ['name', 'province', 'latitude', 'longitude'],
} as const

export const CreateJobDtoSchema = {
  type: 'object',
  properties: {
    constructionSiteId: {
      type: 'string',
      format: 'uuid',
      example: '123e4567-e89b-12d3-a456-426614174000',
    },
    shiftType: {
      allOf: [
        {
          $ref: '#/components/schemas/WorkShift',
        },
      ],
    },
    salaryRangeFrom: {
      type: 'number',
      minimum: 0,
      example: 100000,
    },
    salaryRangeTo: {
      type: 'number',
      minimum: 0,
      example: 200000,
    },
    workerTransportation: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/WorkerTransportation',
      },
    },
    workerAmount: {
      nullable: true,
      allOf: [
        {
          $ref: '#/components/schemas/JobWorkerAmount',
        },
      ],
    },
    yearOfExperience: {
      nullable: true,
      allOf: [
        {
          $ref: '#/components/schemas/JobWorkerExperience',
        },
      ],
    },
    ageRequirement: {
      nullable: true,
      example: 'UNSPECIFIED',
      allOf: [
        {
          $ref: '#/components/schemas/JobAgeRequirement',
        },
      ],
    },
    skillRequirement: {
      nullable: true,
      example: 'ABOVE_3',
      allOf: [
        {
          $ref: '#/components/schemas/JobReviewRequirement',
        },
      ],
    },
    communicationRequirement: {
      nullable: true,
      example: 'ABOVE_3',
      allOf: [
        {
          $ref: '#/components/schemas/JobReviewRequirement',
        },
      ],
    },
    reliabilityRequirement: {
      nullable: true,
      example: 'ABOVE_3',
      allOf: [
        {
          $ref: '#/components/schemas/JobReviewRequirement',
        },
      ],
    },
    workerCertifications: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/JobWorkerCertification',
      },
    },
    nationality: {
      nullable: true,
      allOf: [
        {
          $ref: '#/components/schemas/NationalityType',
        },
      ],
    },
    description: {
      type: 'string',
      nullable: true,
    },
    workDates: {
      minItems: 1,
      example: ['2025-11-01', '2025-11-02'],
      type: 'array',
      items: {
        type: 'string',
      },
    },
    expiredAt: {
      format: 'date-time',
      type: 'string',
      example: '2025-11-01',
    },
    constructionSite: {
      $ref: '#/components/schemas/CreateJobConstructionSiteDto',
    },
    jobCategoryId: {
      type: 'string',
      format: 'uuid',
    },
  },
  required: ['shiftType', 'workDates', 'expiredAt', 'jobCategoryId'],
} as const

export const JobWorkDateDtoSchema = {
  type: 'object',
  properties: {
    date: {
      type: 'string',
      example: '2025-12-01',
    },
  },
  required: ['date'],
} as const

export const JobDetailDtoSchema = {
  type: 'object',
  properties: {
    workerTransportation: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/WorkerTransportation',
      },
    },
    workerAmount: {
      nullable: true,
      allOf: [
        {
          $ref: '#/components/schemas/JobWorkerAmount',
        },
      ],
    },
    shiftType: {
      allOf: [
        {
          $ref: '#/components/schemas/WorkShift',
        },
      ],
    },
    yearOfExperience: {
      nullable: true,
      allOf: [
        {
          $ref: '#/components/schemas/YearExperience',
        },
      ],
    },
    ageRequirement: {
      nullable: true,
      allOf: [
        {
          $ref: '#/components/schemas/JobAgeRequirement',
        },
      ],
    },
    skillRequirement: {
      nullable: true,
      allOf: [
        {
          $ref: '#/components/schemas/JobReviewRequirement',
        },
      ],
    },
    communicationRequirement: {
      nullable: true,
      allOf: [
        {
          $ref: '#/components/schemas/JobReviewRequirement',
        },
      ],
    },
    reliabilityRequirement: {
      nullable: true,
      allOf: [
        {
          $ref: '#/components/schemas/JobReviewRequirement',
        },
      ],
    },
    workerCertifications: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/JobWorkerCertification',
      },
    },
    workDates: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/JobWorkDateDto',
      },
    },
    id: {
      type: 'string',
    },
    orderCompanyId: {
      type: 'string',
    },
    orderCompany: {
      $ref: '#/components/schemas/OrderCompanyEntity',
    },
    constructionSiteId: {
      type: 'string',
    },
    constructionSite: {
      $ref: '#/components/schemas/ConstructionSiteEntity',
    },
    jobCategoryId: {
      type: 'string',
    },
    jobCategory: {
      $ref: '#/components/schemas/JobCategoryEntity',
    },
    salaryRangeFrom: {
      type: 'number',
      nullable: true,
    },
    salaryRangeTo: {
      type: 'number',
      nullable: true,
    },
    nationality: {
      type: 'string',
      nullable: true,
    },
    description: {
      type: 'string',
      nullable: true,
    },
    expiredAt: {
      format: 'date-time',
      type: 'string',
    },
    isOpenForApply: {
      type: 'boolean',
    },
    createdBy: {
      type: 'string',
    },
    createdByUser: {
      $ref: '#/components/schemas/OrderCompanyUserEntity',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    updatedAt: {
      format: 'date-time',
      type: 'string',
      nullable: true,
    },
    deletedAt: {
      format: 'date-time',
      type: 'string',
      nullable: true,
    },
  },
  required: [
    'workerTransportation',
    'workerAmount',
    'shiftType',
    'yearOfExperience',
    'ageRequirement',
    'skillRequirement',
    'communicationRequirement',
    'reliabilityRequirement',
    'workerCertifications',
    'workDates',
    'id',
    'orderCompanyId',
    'orderCompany',
    'constructionSiteId',
    'constructionSite',
    'jobCategoryId',
    'jobCategory',
    'salaryRangeFrom',
    'salaryRangeTo',
    'nationality',
    'description',
    'expiredAt',
    'isOpenForApply',
    'createdBy',
    'createdByUser',
    'createdAt',
    'updatedAt',
    'deletedAt',
  ],
} as const

export const UpdateJobDtoSchema = {
  type: 'object',
  properties: {
    salaryRangeFrom: {
      type: 'number',
      minimum: 0,
      example: 100000,
    },
    salaryRangeTo: {
      type: 'number',
      minimum: 0,
      example: 200000,
    },
    workerTransportation: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/WorkerTransportation',
      },
    },
    workerAmount: {
      nullable: true,
      allOf: [
        {
          $ref: '#/components/schemas/JobWorkerAmount',
        },
      ],
    },
    yearOfExperience: {
      nullable: true,
      allOf: [
        {
          $ref: '#/components/schemas/JobWorkerExperience',
        },
      ],
    },
    ageRequirement: {
      nullable: true,
      example: 'UNSPECIFIED',
      allOf: [
        {
          $ref: '#/components/schemas/JobAgeRequirement',
        },
      ],
    },
    skillRequirement: {
      nullable: true,
      example: 'ABOVE_3',
      allOf: [
        {
          $ref: '#/components/schemas/JobReviewRequirement',
        },
      ],
    },
    communicationRequirement: {
      nullable: true,
      example: 'ABOVE_3',
      allOf: [
        {
          $ref: '#/components/schemas/JobReviewRequirement',
        },
      ],
    },
    reliabilityRequirement: {
      nullable: true,
      example: 'ABOVE_3',
      allOf: [
        {
          $ref: '#/components/schemas/JobReviewRequirement',
        },
      ],
    },
    workerCertifications: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/JobWorkerCertification',
      },
    },
    nationality: {
      nullable: true,
      allOf: [
        {
          $ref: '#/components/schemas/NationalityType',
        },
      ],
    },
    description: {
      type: 'string',
      nullable: true,
    },
    expiredAt: {
      format: 'date-time',
      type: 'string',
      example: '2025-11-01',
    },
    workDates: {
      minItems: 1,
      example: ['2025-11-01', '2025-11-02'],
      type: 'array',
      items: {
        type: 'string',
      },
    },
  },
  required: ['expiredAt', 'workDates'],
} as const

export const OnlineStatusSchema = {
  type: 'string',
  enum: [
    'UNSPECIFIED',
    'ONLINE',
    'ACTIVE_WITHIN_3_DAYS',
    'ACTIVE_WITHIN_7_DAYS',
    'ACTIVE_WITHIN_30_DAYS',
  ],
} as const

export const SearchWorkerConstructionSiteDtoSchema = {
  type: 'object',
  properties: {
    province: {
      type: 'string',
      example: '東京都',
    },
  },
  required: ['province'],
} as const

export const SearchWorkerDtoSchema = {
  type: 'object',
  properties: {
    shiftType: {
      allOf: [
        {
          $ref: '#/components/schemas/WorkShift',
        },
      ],
    },
    salaryRangeFrom: {
      type: 'number',
      minimum: 0,
      example: 100000,
    },
    salaryRangeTo: {
      type: 'number',
      minimum: 0,
      example: 200000,
    },
    workerTransportation: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/WorkerTransportation',
      },
    },
    workerAmount: {
      nullable: true,
      allOf: [
        {
          $ref: '#/components/schemas/JobWorkerAmount',
        },
      ],
    },
    yearOfExperience: {
      nullable: true,
      allOf: [
        {
          $ref: '#/components/schemas/JobWorkerExperience',
        },
      ],
    },
    ageRequirement: {
      nullable: true,
      example: 'UNSPECIFIED',
      allOf: [
        {
          $ref: '#/components/schemas/JobAgeRequirement',
        },
      ],
    },
    skillRequirement: {
      nullable: true,
      example: 'ABOVE_3',
      allOf: [
        {
          $ref: '#/components/schemas/JobReviewRequirement',
        },
      ],
    },
    communicationRequirement: {
      nullable: true,
      example: 'ABOVE_3',
      allOf: [
        {
          $ref: '#/components/schemas/JobReviewRequirement',
        },
      ],
    },
    reliabilityRequirement: {
      nullable: true,
      example: 'ABOVE_3',
      allOf: [
        {
          $ref: '#/components/schemas/JobReviewRequirement',
        },
      ],
    },
    workerCertifications: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/JobWorkerCertification',
      },
    },
    nationality: {
      nullable: true,
      allOf: [
        {
          $ref: '#/components/schemas/NationalityType',
        },
      ],
    },
    workDates: {
      minItems: 1,
      example: ['2025-11-01', '2025-11-02'],
      type: 'array',
      items: {
        type: 'string',
      },
    },
    onlineStatuses: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/OnlineStatus',
      },
    },
    constructionSite: {
      $ref: '#/components/schemas/SearchWorkerConstructionSiteDto',
    },
    jobCategoryId: {
      type: 'string',
      format: 'uuid',
    },
  },
  required: ['shiftType', 'workDates', 'constructionSite', 'jobCategoryId'],
} as const

export const SearchWorkerCombinationWorkerDtoSchema = {
  type: 'object',
  properties: {
    workerType: {
      allOf: [
        {
          $ref: '#/components/schemas/WorkerType',
        },
      ],
    },
    id: {
      type: 'string',
      format: 'uuid',
    },
    fullName: {
      type: 'string',
      nullable: true,
    },
    nickname: {
      type: 'string',
      nullable: true,
    },
  },
  required: ['workerType', 'id', 'fullName', 'nickname'],
} as const

export const SearchWorkerCombinationDtoSchema = {
  type: 'object',
  properties: {
    workers: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/SearchWorkerCombinationWorkerDto',
      },
    },
    workDates: {
      example: ['2025-12-01', '2025-12-02'],
      type: 'array',
      items: {
        type: 'string',
      },
    },
    id: {
      type: 'string',
      format: 'uuid',
    },
  },
  required: ['workers', 'workDates', 'id'],
} as const

export const OfferDtoSchema = {
  type: 'object',
  properties: {
    searchCombinationId: {
      type: 'string',
      format: 'uuid',
      example: '123e4567-e89b-12d3-a456-426614174000',
    },
    offerWorkDates: {
      minItems: 1,
      example: ['2025-11-01', '2025-11-02'],
      type: 'array',
      items: {
        type: 'string',
      },
    },
  },
  required: ['searchCombinationId', 'offerWorkDates'],
} as const

export const StartChatDtoSchema = {
  type: 'object',
  properties: {
    constructionSiteId: {
      type: 'string',
      format: 'uuid',
      example: '123e4567-e89b-12d3-a456-426614174000',
    },
    shiftType: {
      allOf: [
        {
          $ref: '#/components/schemas/WorkShift',
        },
      ],
    },
    salaryRangeFrom: {
      type: 'number',
      minimum: 0,
      example: 100000,
    },
    salaryRangeTo: {
      type: 'number',
      minimum: 0,
      example: 200000,
    },
    workerTransportation: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/WorkerTransportation',
      },
    },
    workerAmount: {
      nullable: true,
      allOf: [
        {
          $ref: '#/components/schemas/JobWorkerAmount',
        },
      ],
    },
    yearOfExperience: {
      nullable: true,
      allOf: [
        {
          $ref: '#/components/schemas/JobWorkerExperience',
        },
      ],
    },
    ageRequirement: {
      nullable: true,
      example: 'UNSPECIFIED',
      allOf: [
        {
          $ref: '#/components/schemas/JobAgeRequirement',
        },
      ],
    },
    skillRequirement: {
      nullable: true,
      example: 'ABOVE_3',
      allOf: [
        {
          $ref: '#/components/schemas/JobReviewRequirement',
        },
      ],
    },
    communicationRequirement: {
      nullable: true,
      example: 'ABOVE_3',
      allOf: [
        {
          $ref: '#/components/schemas/JobReviewRequirement',
        },
      ],
    },
    reliabilityRequirement: {
      nullable: true,
      example: 'ABOVE_3',
      allOf: [
        {
          $ref: '#/components/schemas/JobReviewRequirement',
        },
      ],
    },
    workerCertifications: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/JobWorkerCertification',
      },
    },
    nationality: {
      nullable: true,
      allOf: [
        {
          $ref: '#/components/schemas/NationalityType',
        },
      ],
    },
    description: {
      type: 'string',
      nullable: true,
    },
    workDates: {
      minItems: 1,
      example: ['2025-11-01', '2025-11-02'],
      type: 'array',
      items: {
        type: 'string',
      },
    },
    offers: {
      minItems: 1,
      type: 'array',
      items: {
        $ref: '#/components/schemas/OfferDto',
      },
    },
    constructionSite: {
      $ref: '#/components/schemas/CreateJobConstructionSiteDto',
    },
    jobCategoryId: {
      type: 'string',
      format: 'uuid',
    },
  },
  required: ['shiftType', 'workDates', 'offers', 'jobCategoryId'],
} as const

export const OfferJobResponseDtoSchema = {
  type: 'object',
  properties: {
    constructionSiteId: {
      type: 'string',
      format: 'uuid',
      example: '123e4567-e89b-12d3-a456-426614174000',
    },
  },
  required: ['constructionSiteId'],
} as const

export const GenderSchema = {
  type: 'string',
  enum: ['MALE', 'FEMALE', 'OTHER'],
} as const

export const AchievementDtoSchema = {
  type: 'object',
  properties: {
    file: {
      $ref: '#/components/schemas/FileDto',
    },
    id: {
      type: 'string',
    },
    description: {
      type: 'string',
      nullable: true,
    },
    title: {
      type: 'string',
    },
  },
  required: ['file', 'id', 'description', 'title'],
} as const

export const QualificationDtoSchema = {
  type: 'object',
  properties: {
    file: {
      $ref: '#/components/schemas/FileDto',
    },
    id: {
      type: 'string',
    },
    title: {
      type: 'string',
    },
  },
  required: ['file', 'id', 'title'],
} as const

export const SkillDtoSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
    },
    name: {
      type: 'string',
    },
  },
  required: ['id', 'name'],
} as const

export const WorkerIdentityStatusSchema = {
  type: 'string',
  enum: ['UNVERIFIED', 'VERIFIED', 'REJECTED'],
} as const

export const WorkerIdentityDtoSchema = {
  type: 'object',
  properties: {
    status: {
      allOf: [
        {
          $ref: '#/components/schemas/WorkerIdentityStatus',
        },
      ],
    },
    id: {
      type: 'string',
    },
  },
  required: ['status', 'id'],
} as const

export const WorkerWorkingAreaDtoSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
    },
    prefecture: {
      type: 'string',
    },
  },
  required: ['id', 'prefecture'],
} as const

export const WorkStyleDtoSchema = {
  type: 'object',
  properties: {
    transportation: {
      nullable: true,
      allOf: [
        {
          $ref: '#/components/schemas/WorkerTransportation',
        },
      ],
    },
    yearExperience: {
      nullable: true,
      allOf: [
        {
          $ref: '#/components/schemas/YearExperience',
        },
      ],
    },
    gender: {
      nullable: true,
      allOf: [
        {
          $ref: '#/components/schemas/Gender',
        },
      ],
    },
    legalPersonality: {
      allOf: [
        {
          $ref: '#/components/schemas/LegalPersonality',
        },
      ],
    },
    workerType: {
      allOf: [
        {
          $ref: '#/components/schemas/WorkerType',
        },
      ],
    },
    workerAchievements: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/AchievementDto',
      },
    },
    workerQualifications: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/QualificationDto',
      },
    },
    skills: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/SkillDto',
      },
    },
    jobCategories: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/JobCategoryDto',
      },
    },
    workerIdentity: {
      nullable: true,
      allOf: [
        {
          $ref: '#/components/schemas/WorkerIdentityDto',
        },
      ],
    },
    workerWorkingAreas: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/WorkerWorkingAreaDto',
      },
    },
    reviewStat: {
      $ref: '#/components/schemas/UserReviewStatOptimizedEntity',
    },
    id: {
      type: 'string',
    },
    desiredSalary: {
      type: 'number',
      nullable: true,
    },
    nightShift: {
      type: 'boolean',
      nullable: true,
    },
    nightShiftSalary: {
      type: 'number',
      nullable: true,
    },
    introduction: {
      type: 'string',
      nullable: true,
    },
    nickname: {
      type: 'string',
      nullable: true,
    },
    fullName: {
      type: 'string',
      nullable: true,
    },
    birthday: {
      format: 'date-time',
      type: 'string',
      nullable: true,
    },
    prefecture: {
      type: 'string',
      nullable: true,
    },
    city: {
      type: 'string',
      nullable: true,
    },
    houseNumber: {
      type: 'string',
      nullable: true,
    },
    building: {
      type: 'string',
      nullable: true,
    },
    postalCode: {
      type: 'string',
      nullable: true,
    },
    business: {
      type: 'string',
      nullable: true,
    },
    nationality: {
      type: 'string',
      nullable: true,
    },
    invoiceName: {
      type: 'string',
      nullable: true,
    },
    invoiceTaxNumber: {
      type: 'string',
      nullable: true,
    },
    workInsurance: {
      type: 'boolean',
      nullable: true,
    },
    socialInsurance: {
      type: 'boolean',
      nullable: true,
    },
    invoiceSupport: {
      type: 'boolean',
      nullable: true,
    },
  },
  required: [
    'transportation',
    'yearExperience',
    'gender',
    'legalPersonality',
    'workerType',
    'workerAchievements',
    'workerQualifications',
    'skills',
    'jobCategories',
    'workerIdentity',
    'workerWorkingAreas',
    'reviewStat',
    'id',
    'desiredSalary',
    'nightShift',
    'nightShiftSalary',
    'introduction',
    'nickname',
    'fullName',
    'birthday',
    'prefecture',
    'city',
    'houseNumber',
    'building',
    'postalCode',
    'business',
    'nationality',
    'invoiceName',
    'invoiceTaxNumber',
    'workInsurance',
    'socialInsurance',
    'invoiceSupport',
  ],
} as const

export const TalkRoomOrderBySchema = {
  type: 'string',
  enum: ['lastMessageAt', 'createdAt'],
} as const

export const MessageTypeSchema = {
  type: 'string',
  enum: ['IMAGE', 'FILE', 'TEXT'],
} as const

export const TalkRoomMessageDtoSchema = {
  type: 'object',
  properties: {
    messageType: {
      allOf: [
        {
          $ref: '#/components/schemas/MessageType',
        },
      ],
    },
    id: {
      type: 'string',
    },
    text: {
      type: 'string',
      nullable: true,
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    updatedAt: {
      format: 'date-time',
      type: 'string',
      nullable: true,
    },
  },
  required: ['messageType', 'id', 'text', 'createdAt', 'updatedAt'],
} as const

export const TalkRoomRootWorkerDtoSchema = {
  type: 'object',
  properties: {
    avatar: {
      $ref: '#/components/schemas/FileDto',
    },
    id: {
      type: 'string',
    },
    fullName: {
      type: 'string',
      nullable: true,
    },
    nickname: {
      type: 'string',
      nullable: true,
    },
  },
  required: ['avatar', 'id', 'fullName', 'nickname'],
} as const

export const TalkRoomDtoSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      format: 'uuid',
    },
    jobId: {
      type: 'string',
      format: 'uuid',
    },
    lastMessageId: {
      type: 'string',
      format: 'uuid',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    updatedAt: {
      format: 'date-time',
      type: 'string',
    },
    deletedAt: {
      format: 'date-time',
      type: 'string',
    },
    lastMessage: {
      $ref: '#/components/schemas/TalkRoomMessageDto',
    },
    worker: {
      $ref: '#/components/schemas/TalkRoomRootWorkerDto',
    },
  },
  required: ['id', 'jobId', 'createdAt', 'updatedAt', 'lastMessage', 'worker'],
} as const

export const ConstructionSiteTalkRoomDtoSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      format: 'uuid',
    },
    name: {
      type: 'string',
    },
    province: {
      type: 'string',
    },
    municipality: {
      type: 'string',
    },
    address: {
      type: 'string',
    },
    status: {
      type: 'string',
    },
    order: {
      type: 'number',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    updatedAt: {
      format: 'date-time',
      type: 'string',
    },
    deletedAt: {
      format: 'date-time',
      type: 'string',
    },
    orderCompanyId: {
      type: 'string',
    },
    lastMessageAt: {
      format: 'date-time',
      type: 'string',
    },
    talkRooms: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/TalkRoomDto',
      },
    },
  },
  required: [
    'id',
    'name',
    'province',
    'status',
    'order',
    'createdAt',
    'updatedAt',
    'orderCompanyId',
    'lastMessageAt',
    'talkRooms',
  ],
} as const

export const GetTalkRoomsResponseDtoSchema = {
  type: 'object',
  properties: {
    data: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/ConstructionSiteTalkRoomDto',
      },
    },
    nextCursor: {
      type: 'string',
      nullable: true,
    },
    hasMore: {
      type: 'boolean',
    },
  },
  required: ['data', 'hasMore'],
} as const

export const GetCalendarConstructionSiteDtoSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      format: 'uuid',
    },
    name: {
      type: 'string',
    },
    address: {
      type: 'string',
    },
    province: {
      type: 'string',
    },
    municipality: {
      type: 'string',
    },
  },
  required: ['id', 'name', 'address', 'province', 'municipality'],
} as const

export const GetCalendarJobCategoryParentDtoSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      format: 'uuid',
    },
    name: {
      type: 'string',
    },
  },
  required: ['id', 'name'],
} as const

export const GetCalendarJobCategoryDtoSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      format: 'uuid',
    },
    name: {
      type: 'string',
    },
    parent: {
      $ref: '#/components/schemas/GetCalendarJobCategoryParentDto',
    },
  },
  required: ['id', 'name'],
} as const

export const GetCalendarJobDtoSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      format: 'uuid',
    },
    constructionSite: {
      $ref: '#/components/schemas/GetCalendarConstructionSiteDto',
    },
    jobCategory: {
      $ref: '#/components/schemas/GetCalendarJobCategoryDto',
    },
  },
  required: ['id', 'constructionSite', 'jobCategory'],
} as const

export const GetCalendarWorkerAvatarDtoSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      format: 'uuid',
    },
    s3Key: {
      type: 'string',
    },
    originalName: {
      type: 'string',
    },
  },
  required: ['id', 's3Key', 'originalName'],
} as const

export const GetCalendarWorkerDtoSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      format: 'uuid',
    },
    nickname: {
      type: 'string',
    },
    fullName: {
      type: 'string',
    },
    parentId: {
      type: 'string',
      format: 'uuid',
    },
    avatar: {
      $ref: '#/components/schemas/GetCalendarWorkerAvatarDto',
    },
    worker: {
      $ref: '#/components/schemas/GetCalendarWorkerDto',
    },
  },
  required: ['id', 'nickname', 'fullName'],
} as const

export const GetCalendarTalkRoomParticipationDtoSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      format: 'uuid',
    },
    workerId: {
      type: 'string',
      format: 'uuid',
    },
    worker: {
      $ref: '#/components/schemas/GetCalendarWorkerDto',
    },
  },
  required: ['id'],
} as const

export const GetCalendarTalkRoomDtoSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      format: 'uuid',
    },
    payslipStatus: {
      type: 'string',
      enum: [
        'PRE_CONTRACT',
        'WORKER_OFFERING',
        'JOB_CREATOR_OFFERING',
        'JOB_CREATOR_REQUESTING',
        'JOB_CREATOR_CANCELLED_BEFORE_WORKING',
        'JOB_CREATOR_CANCELLED_WHILE_WORKING',
        'WORKER_CANCELLED_BEFORE_WORKING',
        'WORKER_CANCELLED_WHILE_WORKING',
        'WORKER_REJECTED',
        'JOB_CREATOR_REJECTED',
        'WORKER_REQUESTING',
        'WORKER_WAITING_APPROVAL',
        'WORKER_WAITING_APPROVAL_CANCELLED',
        'WORKER_WAITING_APPROVAL_FINAL',
        'COMPLETED',
        'COMPLETED_CANCELLED',
        'IN_PROGRESS',
        'JOB_CREATOR_REQUEST_FOR_CORRECTION',
        'JOB_CREATOR_REQUEST_FOR_CORRECTION_CANCELLED',
        'JOB_CREATOR_REQUEST_FOR_CORRECTION_FINAL',
        'JOB_CREATOR_REQUEST_FOR_ADD_DATE',
      ],
    },
    workDates: {
      type: 'array',
      items: {
        type: 'string',
      },
    },
    workDatesInRange: {
      type: 'array',
      items: {
        type: 'string',
      },
    },
    job: {
      $ref: '#/components/schemas/GetCalendarJobDto',
    },
    talkRoomParticipations: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/GetCalendarTalkRoomParticipationDto',
      },
    },
  },
  required: [
    'id',
    'payslipStatus',
    'workDates',
    'workDatesInRange',
    'job',
    'talkRoomParticipations',
  ],
} as const

export const GetCalendarResponseDtoSchema = {
  type: 'object',
  properties: {
    constructionSite: {
      $ref: '#/components/schemas/GetCalendarConstructionSiteDto',
    },
    workDates: {
      type: 'array',
      items: {
        type: 'string',
      },
    },
    workDatesInRange: {
      type: 'array',
      items: {
        type: 'string',
      },
    },
    talkRooms: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/GetCalendarTalkRoomDto',
      },
    },
  },
  required: ['constructionSite', 'workDates', 'workDatesInRange', 'talkRooms'],
} as const

export const GetTalkRoomBySiteJobCategoryParentDtoSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      format: 'uuid',
    },
    name: {
      type: 'string',
    },
  },
  required: ['id', 'name'],
} as const

export const GetTalkRoomBySiteJobCategoryDtoSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      format: 'uuid',
    },
    name: {
      type: 'string',
    },
    parent: {
      nullable: true,
      allOf: [
        {
          $ref: '#/components/schemas/GetTalkRoomBySiteJobCategoryParentDto',
        },
      ],
    },
  },
  required: ['id', 'name'],
} as const

export const GetTalkRoomBySiteConstructionSiteDtoSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      format: 'uuid',
    },
    name: {
      type: 'string',
    },
    address: {
      type: 'string',
      nullable: true,
    },
    province: {
      type: 'string',
    },
    municipality: {
      type: 'string',
      nullable: true,
    },
  },
  required: ['id', 'name', 'province'],
} as const

export const GetTalkRoomBySiteJobDtoSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      format: 'uuid',
    },
    jobCategory: {
      $ref: '#/components/schemas/GetTalkRoomBySiteJobCategoryDto',
    },
    constructionSite: {
      $ref: '#/components/schemas/GetTalkRoomBySiteConstructionSiteDto',
    },
  },
  required: ['id', 'jobCategory', 'constructionSite'],
} as const

export const GetTalkRoomBySiteWorkerAvatarDtoSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      format: 'uuid',
    },
    s3Key: {
      type: 'string',
    },
    originalName: {
      type: 'string',
    },
  },
  required: ['id', 's3Key', 'originalName'],
} as const

export const GetTalkRoomBySiteWorkerDtoSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      format: 'uuid',
    },
    nickname: {
      type: 'string',
    },
    fullName: {
      type: 'string',
    },
    parentId: {
      type: 'string',
      nullable: true,
      format: 'uuid',
    },
    avatar: {
      nullable: true,
      allOf: [
        {
          $ref: '#/components/schemas/GetTalkRoomBySiteWorkerAvatarDto',
        },
      ],
    },
    worker: {
      nullable: true,
      allOf: [
        {
          $ref: '#/components/schemas/GetTalkRoomBySiteWorkerDto',
        },
      ],
    },
  },
  required: ['id', 'nickname', 'fullName'],
} as const

export const GetTalkRoomBySiteParticipationDtoSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      format: 'uuid',
    },
    workerId: {
      type: 'string',
      nullable: true,
      format: 'uuid',
    },
    worker: {
      nullable: true,
      allOf: [
        {
          $ref: '#/components/schemas/GetTalkRoomBySiteWorkerDto',
        },
      ],
    },
  },
  required: ['id'],
} as const

export const GetTalkRoomBySiteDtoSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      format: 'uuid',
    },
    job: {
      $ref: '#/components/schemas/GetTalkRoomBySiteJobDto',
    },
    workDates: {
      type: 'array',
      items: {
        type: 'string',
      },
    },
    talkRoomParticipations: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/GetTalkRoomBySiteParticipationDto',
      },
    },
  },
  required: ['id', 'job', 'workDates', 'talkRoomParticipations'],
} as const

export const GetTalkRoomBySiteResponseDtoSchema = {
  type: 'object',
  properties: {
    data: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/GetTalkRoomBySiteDto',
      },
    },
  },
  required: ['data'],
} as const

export const TalkRoomConversationJobConstructionSiteDtoSchema = {
  type: 'object',
  properties: {
    status: {
      allOf: [
        {
          $ref: '#/components/schemas/ConstructionSiteStatus',
        },
      ],
    },
    id: {
      type: 'string',
    },
    name: {
      type: 'string',
    },
    province: {
      type: 'string',
    },
    municipality: {
      type: 'string',
      nullable: true,
    },
    address: {
      type: 'string',
      nullable: true,
    },
    order: {
      type: 'number',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
  },
  required: ['status', 'id', 'name', 'province', 'municipality', 'address', 'order', 'createdAt'],
} as const

export const TalkRoomConversationJobDtoSchema = {
  type: 'object',
  properties: {
    constructionSite: {
      $ref: '#/components/schemas/TalkRoomConversationJobConstructionSiteDto',
    },
    jobCategory: {
      $ref: '#/components/schemas/JobCategoryEntity',
    },
    id: {
      type: 'string',
      format: 'uuid',
    },
  },
  required: ['constructionSite', 'jobCategory', 'id'],
} as const

export const WorkerAccountStatusSchema = {
  type: 'string',
  enum: ['ACTIVE', 'SUSPENDED', 'INACTIVE', 'DELETED'],
} as const

export const WorkerEntitySchema = {
  type: 'object',
  properties: {
    transportation: {
      nullable: true,
      allOf: [
        {
          $ref: '#/components/schemas/WorkerTransportation',
        },
      ],
    },
    status: {
      allOf: [
        {
          $ref: '#/components/schemas/WorkerAccountStatus',
        },
      ],
    },
    yearExperience: {
      nullable: true,
      allOf: [
        {
          $ref: '#/components/schemas/YearExperience',
        },
      ],
    },
    gender: {
      nullable: true,
      allOf: [
        {
          $ref: '#/components/schemas/Gender',
        },
      ],
    },
    legalPersonality: {
      allOf: [
        {
          $ref: '#/components/schemas/LegalPersonality',
        },
      ],
    },
    avatarId: {
      type: 'string',
      nullable: true,
    },
    lastOnlineAt: {
      format: 'date-time',
      type: 'string',
      nullable: true,
    },
    invoiceSupport: {
      type: 'boolean',
      nullable: true,
    },
    nightShiftSalary: {
      type: 'number',
      nullable: true,
    },
    latitude: {
      type: 'number',
      nullable: true,
    },
    longitude: {
      type: 'number',
      nullable: true,
    },
    invoiceName: {
      type: 'string',
      nullable: true,
    },
    invoiceTaxNumber: {
      type: 'string',
      nullable: true,
    },
    homePage: {
      type: 'string',
      nullable: true,
    },
    socialInsurance: {
      type: 'boolean',
      nullable: true,
    },
    workInsurance: {
      type: 'boolean',
      nullable: true,
    },
    nightShift: {
      type: 'boolean',
      nullable: true,
    },
    introduction: {
      type: 'string',
      nullable: true,
    },
    prefecture: {
      type: 'string',
      nullable: true,
    },
    houseNumber: {
      type: 'string',
      nullable: true,
    },
    isFinishedBasicProfile: {
      type: 'boolean',
    },
    nationality: {
      type: 'string',
      nullable: true,
    },
    business: {
      type: 'string',
      nullable: true,
    },
    hiraganaFirstName: {
      type: 'string',
      nullable: true,
    },
    hiraganaLastName: {
      type: 'string',
      nullable: true,
    },
    hiraganaFullName: {
      type: 'string',
      nullable: true,
    },
    birthday: {
      format: 'date-time',
      type: 'string',
      nullable: true,
    },
    postalCode: {
      type: 'string',
      nullable: true,
    },
    city: {
      type: 'string',
      nullable: true,
    },
    building: {
      type: 'string',
      nullable: true,
    },
    fullName: {
      type: 'string',
      nullable: true,
    },
    desiredSalary: {
      type: 'number',
      nullable: true,
    },
    firstName: {
      type: 'string',
      nullable: true,
    },
    lastName: {
      type: 'string',
      nullable: true,
    },
    nickname: {
      type: 'string',
      nullable: true,
    },
    parentId: {
      type: 'string',
      nullable: true,
    },
    deletedAt: {
      format: 'date-time',
      type: 'string',
      nullable: true,
    },
    paymentAccountId: {
      type: 'string',
      nullable: true,
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    updatedAt: {
      format: 'date-time',
      type: 'string',
      nullable: true,
    },
    id: {
      type: 'string',
    },
    phoneNumber: {
      type: 'string',
    },
    inventoryId: {
      type: 'string',
      nullable: true,
    },
    avatar: {
      nullable: true,
      allOf: [
        {
          $ref: '#/components/schemas/FileEntity',
        },
      ],
    },
  },
  required: [
    'transportation',
    'status',
    'yearExperience',
    'gender',
    'legalPersonality',
    'avatarId',
    'lastOnlineAt',
    'invoiceSupport',
    'nightShiftSalary',
    'latitude',
    'longitude',
    'invoiceName',
    'invoiceTaxNumber',
    'homePage',
    'socialInsurance',
    'workInsurance',
    'nightShift',
    'introduction',
    'prefecture',
    'houseNumber',
    'isFinishedBasicProfile',
    'nationality',
    'business',
    'hiraganaFirstName',
    'hiraganaLastName',
    'hiraganaFullName',
    'birthday',
    'postalCode',
    'city',
    'building',
    'fullName',
    'desiredSalary',
    'firstName',
    'lastName',
    'nickname',
    'parentId',
    'deletedAt',
    'paymentAccountId',
    'createdAt',
    'updatedAt',
    'id',
    'phoneNumber',
    'inventoryId',
  ],
} as const

export const TalkRoomConversationParticipationDtoSchema = {
  type: 'object',
  properties: {
    workerId: {
      type: 'string',
      format: 'uuid',
    },
    orderCompanyUserId: {
      type: 'string',
      format: 'uuid',
    },
    isActualWorker: {
      type: 'boolean',
    },
    worker: {
      $ref: '#/components/schemas/WorkerEntity',
    },
    orderCompanyUser: {
      $ref: '#/components/schemas/OrderCompanyUserEntity',
    },
  },
  required: ['workerId', 'orderCompanyUserId', 'isActualWorker', 'worker', 'orderCompanyUser'],
} as const

export const TalkRoomConversationDtoSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      format: 'uuid',
    },
    job: {
      $ref: '#/components/schemas/TalkRoomConversationJobDto',
    },
    participations: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/TalkRoomConversationParticipationDto',
      },
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    updatedAt: {
      format: 'date-time',
      type: 'string',
    },
  },
  required: ['id', 'job', 'participations', 'createdAt', 'updatedAt'],
} as const

export const MessageUserDtoSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
    },
    avatar: {
      type: 'string',
    },
    userType: {
      type: 'string',
      enum: ['manager', 'worker', 'staff', 'sub-worker', 'operator'],
    },
    nickname: {
      type: 'string',
    },
  },
  required: ['id', 'userType'],
} as const

export const MessageFileDtoSchema = {
  type: 'object',
  properties: {
    url: {
      type: 'string',
    },
    originalName: {
      type: 'string',
    },
    mimeType: {
      type: 'string',
    },
    size: {
      type: 'number',
      nullable: true,
    },
  },
  required: ['url', 'originalName', 'mimeType', 'size'],
} as const

export const MessageMetadataDtoSchema = {
  type: 'object',
  properties: {
    messageActionType: {
      type: 'string',
      enum: [
        'WORKER_OFFERING',
        'IN_PROGRESS',
        'WORKER_REQUESTING',
        'WORKER_WAITING_APPROVAL',
        'WORKER_WAITING_APPROVAL_CANCELLED',
        'WORKER_WAITING_APPROVAL_FINAL',
        'WORKER_CANCELLED_BEFORE_WORKING',
        'WORKER_CANCELLED_WHILE_WORKING',
        'WORKER_REJECTED',
        'WORKER_ACCEPT_ADD_DATE',
        'WORKER_REJECT_ADD_DATE',
        'WORKER_SELF_REJECT',
        'JOB_CREATOR_OFFERING',
        'JOB_CREATOR_REQUESTING',
        'JOB_CREATOR_ACCEPT_JOB',
        'JOB_CREATOR_CANCELLED_BEFORE_WORKING',
        'JOB_CREATOR_CANCELLED_WHILE_WORKING',
        'JOB_CREATOR_REJECTED',
        'JOB_CREATOR_APPROVED',
        'JOB_CREATOR_APPROVED_CANCELLED',
        'JOB_CREATOR_APPROVED_FINAL',
        'JOB_CREATOR_RETURN_FOR_CORRECTION',
        'JOB_CREATOR_ADD_DATE',
        'JOB_CREATOR_DELETE_DATE',
        'JOB_CREATOR_SELF_REJECT',
      ],
    },
    payslipId: {
      type: 'string',
    },
  },
  required: ['messageActionType'],
} as const

export const MessageDtoSchema = {
  type: 'object',
  properties: {
    messageType: {
      allOf: [
        {
          $ref: '#/components/schemas/MessageType',
        },
      ],
    },
    user: {
      $ref: '#/components/schemas/MessageUserDto',
    },
    image: {
      type: 'string',
    },
    file: {
      $ref: '#/components/schemas/MessageFileDto',
    },
    metadata: {
      nullable: true,
      allOf: [
        {
          $ref: '#/components/schemas/MessageMetadataDto',
        },
      ],
    },
    id: {
      type: 'string',
    },
    text: {
      type: 'string',
      nullable: true,
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
  },
  required: ['messageType', 'user', 'id', 'text', 'createdAt'],
} as const

export const GetOrderCompanyMessageResSchema = {
  type: 'object',
  properties: {
    hasMore: {
      type: 'boolean',
    },
    messages: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/MessageDto',
      },
    },
    cursorId: {
      type: 'string',
    },
  },
  required: ['hasMore', 'messages'],
} as const

export const PayslipStatusSchema = {
  type: 'string',
  enum: [
    'PRE_CONTRACT',
    'WORKER_OFFERING',
    'JOB_CREATOR_OFFERING',
    'JOB_CREATOR_REQUESTING',
    'JOB_CREATOR_CANCELLED_BEFORE_WORKING',
    'JOB_CREATOR_CANCELLED_WHILE_WORKING',
    'WORKER_CANCELLED_BEFORE_WORKING',
    'WORKER_CANCELLED_WHILE_WORKING',
    'WORKER_REJECTED',
    'JOB_CREATOR_REJECTED',
    'WORKER_REQUESTING',
    'WORKER_WAITING_APPROVAL',
    'WORKER_WAITING_APPROVAL_CANCELLED',
    'WORKER_WAITING_APPROVAL_FINAL',
    'COMPLETED',
    'COMPLETED_CANCELLED',
    'IN_PROGRESS',
    'JOB_CREATOR_REQUEST_FOR_CORRECTION',
    'JOB_CREATOR_REQUEST_FOR_CORRECTION_CANCELLED',
    'JOB_CREATOR_REQUEST_FOR_CORRECTION_FINAL',
    'JOB_CREATOR_REQUEST_FOR_ADD_DATE',
  ],
} as const

export const WorkerAvatarDtoSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
    },
    s3Key: {
      type: 'string',
    },
    url: {
      type: 'string',
    },
  },
  required: ['id', 's3Key', 'url'],
} as const

export const WorkerDtoSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
    },
    fullName: {
      type: 'string',
    },
    nickname: {
      type: 'string',
    },
    avatar: {
      $ref: '#/components/schemas/WorkerAvatarDto',
    },
    workerType: {
      allOf: [
        {
          $ref: '#/components/schemas/WorkerType',
        },
      ],
    },
  },
  required: ['id', 'fullName', 'nickname', 'workerType'],
} as const

export const JobPayslipWorkDateDtoSchema = {
  type: 'object',
  properties: {
    date: {
      type: 'string',
      example: '2025-11-01',
    },
  },
  required: ['date'],
} as const

export const WorkerPayslipWorkDateDtoSchema = {
  type: 'object',
  properties: {
    date: {
      type: 'string',
      example: '2025-11-01',
    },
    isAutoFilled: {
      type: 'boolean',
      example: true,
    },
  },
  required: ['date', 'isAutoFilled'],
} as const

export const WorkerWorkingScheduleStatusSchema = {
  type: 'string',
  enum: ['CANCELLED', 'WORKING', 'ADDING', 'DELETING'],
} as const

export const WorkerWorkingScheduleDtoSchema = {
  type: 'object',
  properties: {
    date: {
      type: 'string',
      example: '2025-11-01',
    },
    status: {
      example: 'WORKING',
      allOf: [
        {
          $ref: '#/components/schemas/WorkerWorkingScheduleStatus',
        },
      ],
    },
  },
  required: ['date', 'status'],
} as const

export const WorkerPayslipDtoSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    workFee: {
      type: 'number',
    },
    privateTransportationFee: {
      type: 'number',
    },
    numberOfPrivateTransportation: {
      type: 'number',
      nullable: true,
    },
    publicTransportationFee: {
      type: 'number',
    },
    numberOfPublicTransportation: {
      type: 'number',
      nullable: true,
    },
    materialFee: {
      type: 'number',
    },
    numberOfMaterial: {
      type: 'number',
    },
    parkingFee: {
      type: 'number',
    },
    numberOfParking: {
      type: 'number',
    },
    other1Fee: {
      type: 'number',
    },
    numberOfOther1: {
      type: 'number',
    },
    other2Fee: {
      type: 'number',
    },
    numberOfOther2: {
      type: 'number',
    },
    cancelFee: {
      type: 'number',
    },
    worker: {
      $ref: '#/components/schemas/WorkerDto',
    },
    jobPayslipWorkDates: {
      example: [
        {
          date: '2025-11-01',
        },
      ],
      type: 'array',
      items: {
        $ref: '#/components/schemas/JobPayslipWorkDateDto',
      },
    },
    workerPayslipWorkDates: {
      example: [
        {
          date: '2025-11-01',
          isAutoFilled: true,
        },
      ],
      type: 'array',
      items: {
        $ref: '#/components/schemas/WorkerPayslipWorkDateDto',
      },
    },
    workerWorkingSchedules: {
      example: [
        {
          date: '2025-11-01',
        },
      ],
      type: 'array',
      items: {
        $ref: '#/components/schemas/WorkerWorkingScheduleDto',
      },
    },
  },
  required: [
    'id',
    'createdAt',
    'workFee',
    'privateTransportationFee',
    'publicTransportationFee',
    'materialFee',
    'numberOfMaterial',
    'parkingFee',
    'numberOfParking',
    'other1Fee',
    'numberOfOther1',
    'other2Fee',
    'numberOfOther2',
    'cancelFee',
    'worker',
    'jobPayslipWorkDates',
    'workerPayslipWorkDates',
    'workerWorkingSchedules',
  ],
} as const

export const CreatedByUserAvatarDtoSchema = {
  type: 'object',
  properties: {
    s3Key: {
      type: 'string',
    },
    url: {
      type: 'string',
    },
    id: {
      type: 'string',
    },
  },
  required: ['s3Key', 'url', 'id'],
} as const

export const CreatedByUserDtoSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
    },
    nickname: {
      type: 'string',
    },
    avatar: {
      $ref: '#/components/schemas/CreatedByUserAvatarDto',
    },
  },
  required: ['id', 'nickname', 'avatar'],
} as const

export const PayslipDtoSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    createdByWorkerId: {
      type: 'string',
      nullable: true,
    },
    createdByOrderCompanyUserId: {
      type: 'string',
      nullable: true,
    },
    workerPayslips: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/WorkerPayslipDto',
      },
    },
    createdByWorker: {
      $ref: '#/components/schemas/CreatedByUserDto',
    },
    createdByOrderCompanyUser: {
      $ref: '#/components/schemas/CreatedByUserDto',
    },
  },
  required: ['id', 'createdAt', 'workerPayslips'],
} as const

export const WorkerWorkingScheduleInOtherTalkRoomDtoSchema = {
  type: 'object',
  properties: {
    workerId: {
      type: 'string',
      example: '123e4567-e89b-12d3-a456-426614174000',
    },
    date: {
      type: 'string',
      example: '2025-11-01',
    },
    status: {
      allOf: [
        {
          $ref: '#/components/schemas/WorkerWorkingScheduleStatus',
        },
      ],
    },
    shift: {
      allOf: [
        {
          $ref: '#/components/schemas/WorkShift',
        },
      ],
    },
    isLatestVersion: {
      type: 'boolean',
      example: true,
    },
  },
  required: ['workerId', 'date', 'status', 'shift', 'isLatestVersion'],
} as const

export const GetTalkRoomQoutationResDtoSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    payslipStatus: {
      allOf: [
        {
          $ref: '#/components/schemas/PayslipStatus',
        },
      ],
    },
    lastPayslip: {
      $ref: '#/components/schemas/PayslipDto',
    },
    timingApplyCancelFee: {
      format: 'date-time',
      type: 'string',
      nullable: true,
    },
    workerWorkingSchedulesInOtherTalkRoom: {
      example: [
        {
          workerId: '123e4567-e89b-12d3-a456-426614174000',
          date: '2025-11-01T00:00:00.000Z',
          status: 'WORKING',
          shift: 'DAY',
          isLatestVersion: true,
        },
        {
          workerId: '123e4567-e89b-12d3-a456-426614174000',
          date: '2025-11-02T00:00:00.000Z',
          status: 'WORKING',
          shift: 'DAY',
          isLatestVersion: true,
        },
      ],
      type: 'array',
      items: {
        $ref: '#/components/schemas/WorkerWorkingScheduleInOtherTalkRoomDto',
      },
    },
  },
  required: ['id', 'createdAt', 'workerWorkingSchedulesInOtherTalkRoom'],
} as const

export const GetPayslipHistoryResDtoSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    createdByWorkerId: {
      type: 'string',
    },
    createdByOrderCompanyUserId: {
      type: 'string',
    },
    createdByWorker: {
      $ref: '#/components/schemas/CreatedByUserDto',
    },
    createdByOrderCompanyUser: {
      $ref: '#/components/schemas/CreatedByUserDto',
    },
  },
  required: ['id', 'createdAt', 'createdByWorkerId', 'createdByOrderCompanyUserId'],
} as const

export const WorkerPayslipInHistoryDtoSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    workFee: {
      type: 'number',
    },
    privateTransportationFee: {
      type: 'number',
    },
    numberOfPrivateTransportation: {
      type: 'number',
      nullable: true,
    },
    publicTransportationFee: {
      type: 'number',
    },
    numberOfPublicTransportation: {
      type: 'number',
      nullable: true,
    },
    materialFee: {
      type: 'number',
    },
    numberOfMaterial: {
      type: 'number',
    },
    parkingFee: {
      type: 'number',
    },
    numberOfParking: {
      type: 'number',
    },
    other1Fee: {
      type: 'number',
    },
    numberOfOther1: {
      type: 'number',
    },
    other2Fee: {
      type: 'number',
    },
    numberOfOther2: {
      type: 'number',
    },
    worker: {
      $ref: '#/components/schemas/WorkerDto',
    },
    jobPayslipWorkDates: {
      example: ['2025-11-01', '2025-11-02', '2025-11-03'],
      type: 'array',
      items: {
        type: 'string',
      },
    },
    workerPayslipWorkDates: {
      example: ['2025-11-01', '2025-11-02'],
      type: 'array',
      items: {
        type: 'string',
      },
    },
    workerWorkingSchedules: {
      example: [
        {
          date: '2025-11-01',
          status: 'WORKING',
        },
      ],
      type: 'array',
      items: {
        $ref: '#/components/schemas/WorkerWorkingScheduleDto',
      },
    },
  },
  required: [
    'id',
    'createdAt',
    'workFee',
    'privateTransportationFee',
    'publicTransportationFee',
    'materialFee',
    'numberOfMaterial',
    'parkingFee',
    'numberOfParking',
    'other1Fee',
    'numberOfOther1',
    'other2Fee',
    'numberOfOther2',
    'worker',
    'jobPayslipWorkDates',
    'workerPayslipWorkDates',
    'workerWorkingSchedules',
  ],
} as const

export const PayslipInHistoryDtoSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    createdByWorkerId: {
      type: 'string',
      nullable: true,
    },
    createdByOrderCompanyUserId: {
      type: 'string',
      nullable: true,
    },
    status: {
      allOf: [
        {
          $ref: '#/components/schemas/PayslipStatus',
        },
      ],
    },
    workerPayslips: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/WorkerPayslipInHistoryDto',
      },
    },
    createdByWorker: {
      $ref: '#/components/schemas/CreatedByUserDto',
    },
    createdByOrderCompanyUser: {
      $ref: '#/components/schemas/CreatedByUserDto',
    },
  },
  required: ['id', 'createdAt', 'status', 'workerPayslips'],
} as const

export const ContentTypeSchema = {
  type: 'string',
  enum: ['TEXT', 'IMAGE', 'FILE'],
} as const

export const CreateMessageReqSchema = {
  type: 'object',
  properties: {
    type: {
      allOf: [
        {
          $ref: '#/components/schemas/ContentType',
        },
      ],
    },
    text: {
      type: 'string',
      maxLength: 2000,
    },
    file: {
      $ref: '#/components/schemas/UpdateFileFieldDto',
    },
    identifier: {
      type: 'string',
    },
    displayText: {
      type: 'string',
    },
    metadata: {
      type: 'object',
    },
  },
  required: ['type'],
} as const

export const JobPayslipWorkDateItemDtoSchema = {
  type: 'object',
  properties: {
    date: {
      type: 'string',
      example: '2025-11-01',
    },
  },
  required: ['date'],
} as const

export const WorkerPayslipWorkDateItemDtoSchema = {
  type: 'object',
  properties: {
    date: {
      type: 'string',
      example: '2025-11-01',
    },
    isAutoFilled: {
      type: 'boolean',
      example: true,
    },
  },
  required: ['date', 'isAutoFilled'],
} as const

export const WorkerPayslipForSubmitDtoSchema = {
  type: 'object',
  properties: {
    jobPayslipWorkDates: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/JobPayslipWorkDateItemDto',
      },
    },
    workerPayslipWorkDates: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/WorkerPayslipWorkDateItemDto',
      },
    },
    workerId: {
      type: 'string',
    },
    numberOfPrivateTransportation: {
      type: 'number',
    },
    numberOfPublicTransportation: {
      type: 'number',
    },
  },
  required: ['jobPayslipWorkDates', 'workerPayslipWorkDates', 'workerId'],
} as const

export const SubmitQuotationDtoSchema = {
  type: 'object',
  properties: {
    workerPayslips: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/WorkerPayslipForSubmitDto',
      },
    },
    lastPayslipId: {
      type: 'string',
    },
  },
  required: ['workerPayslips', 'lastPayslipId'],
} as const

export const AcceptQuotationDtoSchema = {
  type: 'object',
  properties: {
    lastPayslipId: {
      type: 'string',
      format: 'uuid',
    },
  },
  required: ['lastPayslipId'],
} as const

export const RejectQuotationDtoSchema = {
  type: 'object',
  properties: {
    lastPayslipId: {
      type: 'string',
      format: 'uuid',
    },
  },
  required: ['lastPayslipId'],
} as const

export const CancelQuotationDtoSchema = {
  type: 'object',
  properties: {
    lastPayslipId: {
      type: 'string',
      format: 'uuid',
    },
    cancelReason: {
      type: 'string',
    },
  },
  required: ['lastPayslipId', 'cancelReason'],
} as const

export const WorkerWorkDateDtoSchema = {
  type: 'object',
  properties: {
    workerId: {
      type: 'string',
      format: 'uuid',
      example: '123e4567-e89b-12d3-a456-426614174000',
    },
    workDates: {
      example: ['2025-11-01', '2025-11-02'],
      type: 'array',
      items: {
        type: 'string',
      },
    },
  },
  required: ['workerId', 'workDates'],
} as const

export const RemoveWorkDateBodyDtoSchema = {
  type: 'object',
  properties: {
    lastPayslipId: {
      type: 'string',
      format: 'uuid',
      example: '123e4567-e89b-12d3-a456-426614174000',
    },
    removeWorkDates: {
      example: [
        {
          workerId: '123e4567-e89b-12d3-a456-426614174000',
          workDates: ['2025-11-01', '2025-11-02'],
        },
      ],
      type: 'array',
      items: {
        $ref: '#/components/schemas/WorkerWorkDateDto',
      },
    },
  },
  required: ['lastPayslipId', 'removeWorkDates'],
} as const

export const AddWorkDateBodyDtoSchema = {
  type: 'object',
  properties: {
    lastPayslipId: {
      type: 'string',
      format: 'uuid',
      example: '123e4567-e89b-12d3-a456-426614174000',
    },
    addWorkDates: {
      example: [
        {
          workerId: '123e4567-e89b-12d3-a456-426614174000',
          workDates: ['2025-11-01', '2025-11-02'],
        },
      ],
      type: 'array',
      items: {
        $ref: '#/components/schemas/WorkerWorkDateDto',
      },
    },
  },
  required: ['lastPayslipId', 'addWorkDates'],
} as const

export const ReturnForCorrectionBodyDtoSchema = {
  type: 'object',
  properties: {
    lastPayslipId: {
      type: 'string',
      format: 'uuid',
      example: '123e4567-e89b-12d3-a456-426614174000',
    },
    reason: {
      type: 'string',
      example: '理由',
    },
  },
  required: ['lastPayslipId', 'reason'],
} as const

export const ApprovePayslipBodyDtoSchema = {
  type: 'object',
  properties: {
    lastPayslipId: {
      type: 'string',
      format: 'uuid',
    },
  },
  required: ['lastPayslipId'],
} as const

export const CancelAddWorkDateRequestBodyDtoSchema = {
  type: 'object',
  properties: {
    lastPayslipId: {
      type: 'string',
      format: 'uuid',
      example: '123e4567-e89b-12d3-a456-426614174000',
    },
  },
  required: ['lastPayslipId'],
} as const

export const TodoCreateDtoSchema = {
  type: 'object',
  properties: {
    description: {
      type: 'string',
    },
  },
  required: ['description'],
} as const

export const TodoDtoSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
    },
    description: {
      type: 'string',
    },
    isDone: {
      type: 'boolean',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    updatedAt: {
      format: 'date-time',
      type: 'string',
    },
    deletedAt: {
      format: 'date-time',
      type: 'string',
    },
  },
  required: ['id', 'description', 'isDone', 'createdAt', 'updatedAt', 'deletedAt'],
} as const

export const TodoGetListResponseDtoSchema = {
  type: 'object',
  properties: {
    items: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/TodoDto',
      },
    },
    totalItems: {
      type: 'number',
    },
  },
  required: ['items', 'totalItems'],
} as const

export const UpdateTodoDtoSchema = {
  type: 'object',
  properties: {
    description: {
      type: 'string',
      description: 'Todo description',
    },
    isDone: {
      type: 'boolean',
      description: 'Todo is done',
    },
  },
} as const

export const ReviewTypeSchema = {
  type: 'string',
  enum: ['COMMUNICATION', 'RELIABILITY', 'SKILL', 'NEGATIVE'],
} as const

export const CreateReviewDtoSchema = {
  type: 'object',
  properties: {
    reviewType: {
      allOf: [
        {
          $ref: '#/components/schemas/ReviewType',
        },
      ],
    },
    workerId: {
      type: 'string',
      format: 'uuid',
    },
    negativeReviewReason: {
      type: 'string',
      nullable: true,
    },
  },
  required: ['reviewType', 'workerId'],
} as const

export const ReviewDtoSchema = {
  type: 'object',
  properties: {
    reviewType: {
      allOf: [
        {
          $ref: '#/components/schemas/ReviewType',
        },
      ],
    },
    workerId: {
      type: 'string',
      format: 'uuid',
    },
    negativeReviewReason: {
      type: 'string',
      nullable: true,
    },
  },
  required: ['reviewType', 'workerId'],
} as const

export const WorkerWithReviewDtoSchema = {
  type: 'object',
  properties: {
    avatar: {
      nullable: true,
      allOf: [
        {
          $ref: '#/components/schemas/WorkerAvatarDto',
        },
      ],
    },
    review: {
      nullable: true,
      allOf: [
        {
          $ref: '#/components/schemas/ReviewDto',
        },
      ],
    },
    id: {
      type: 'string',
      format: 'uuid',
    },
    fullName: {
      type: 'string',
      nullable: true,
    },
    nickname: {
      type: 'string',
      nullable: true,
    },
    lastReviewedAt: {
      format: 'date-time',
      type: 'string',
      nullable: true,
    },
  },
  required: ['id', 'lastReviewedAt'],
} as const

export const GetReviewsOfTalkRoomDtoSchema = {
  type: 'object',
  properties: {
    members: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/WorkerWithReviewDto',
      },
    },
  },
  required: ['members'],
} as const

export const ReviewOfUserDtoSchema = {
  type: 'object',
  properties: {
    reviewType: {
      allOf: [
        {
          $ref: '#/components/schemas/ReviewType',
        },
      ],
    },
    avatar: {
      nullable: true,
      allOf: [
        {
          $ref: '#/components/schemas/WorkerAvatarDto',
        },
      ],
    },
    identity: {
      allOf: [
        {
          $ref: '#/components/schemas/WorkerIdentityStatus',
        },
      ],
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    negativeReviewReason: {
      type: 'string',
      nullable: true,
    },
    nickName: {
      type: 'string',
      nullable: true,
    },
    fullName: {
      type: 'string',
      nullable: true,
    },
    constructionSiteName: {
      type: 'string',
      nullable: true,
    },
  },
  required: ['reviewType', 'identity', 'createdAt', 'negativeReviewReason', 'nickName', 'fullName'],
} as const

export const GetReviewsOfUserResDtoSchema = {
  type: 'object',
  properties: {
    reviews: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/ReviewOfUserDto',
      },
    },
  },
  required: ['reviews'],
} as const

export const ErrorCodeSchema = {
  type: 'string',
  enum: [
    'TOKEN_EXPIRED',
    'INVALID_TOKEN',
    'INVALID_FILE_URL',
    'UNAUTHORIZED',
    'EMAIL_ALREADY_REGISTERED',
    'PASSWORD_INVALID',
    'INVALID_CREDENTIALS',
    'EMAIL_NOT_FOUND',
    'STAFF_ALREADY_REGISTERED',
    'STAFF_ALREADY_INVITED',
    'USER_NOT_ACTIVE',
    'ORDER_COMPANY_NOT_FOUND',
    'NEED_TO_SPECIFY_REUSE_ACCOUNT_OPTION',
    'KEY_FORBIDDEN',
    'LEGAL_PERSONALITY_REQUIRED',
    'INVALID_DATA',
    'JOB_CATEGORY_IDS_INVALID',
    'NOT_FOUND',
    'INVALID_PHONE_NUMBER',
    'OTP_EXPIRED',
    'OTP_INVALID',
    'OTP_LIMIT_REACHED',
    'OTP_SENT_TOO_FAST',
    'INVALID_DOCUMENT_TYPE',
    'INVALID_ADDITIONAL_DOCUMENT_TYPE',
    'INVALID_NUMBER_OF_FILES',
    'DATA_REQUIRED',
    'DATA_NOT_ALLOWED',
    'ORDER_COMPANY_NOT_VERIFIED',
    'SEARCH_COMBINATION_NOT_EXIST',
    'SEARCH_COMBINATION_WORK_DATE_INVALID',
    'NOT_THE_LASTEST_PAYSLIP',
    'PAYSLIP_STATUS_NOT_PRE_CONTRACT',
    'WORKER_PAYSLIPS_NOT_VALID',
    'WORKER_WORKING_SCHEDULE_MUST_BE_AFTER_TODAY',
    'WORKER_WORKING_SCHEDULE_IS_CONFLICT',
    'WORKER_WORKING_SCHEDULE_ALL_EMPTY',
    'PAYS_SLIP_STATUS_NOT_IN_PROGRESS',
    'JOB_IS_ALREADY_STARTED',
    'JOB_IS_NOT_STARTED_YET',
    'NO_WORK_DATE_TO_REMOVE',
    'REMOVE_WORK_DATES_NOT_VALID',
    'ADD_WORK_DATES_NOT_VALID',
    'NO_WORK_DATE_TO_ADD',
    'PAYS_SLIP_STATUS_NOT_VALID',
    'CONFLICT_WORKER_WORKING_SCHEDULES',
    'ALREADY_REVIEWED_OR_RECENTLY_REVIEWED',
    'JOB_IS_NOT_COMPLETED',
  ],
} as const

export const EventTypeSchema = {
  type: 'string',
  enum: ['NEW_MESSAGE'],
} as const
